<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>satble diffuion初尝试</title>
    <link href="/2024/03/13/satble-diffuion-1/"/>
    <url>/2024/03/13/satble-diffuion-1/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Stability-AI/stablediffusion">https://github.com/Stability-AI/stablediffusion</a><br>一般使用webUI版，可以可视化<br><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">https://github.com/AUTOMATIC1111/stable-diffusion-webui</a><br>网上也有一些整合包，包括了很多常见的插件等，不需要自己再去安装</p><p>节点类连接的UI，有点像UE引擎的蓝图，出图速度比webUI快<br><a href="https://github.com/ltdrdata/ComfyUI-Manager">https://github.com/ltdrdata/ComfyUI-Manager</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>grid栅格布局</title>
    <link href="/2023/07/05/grid/"/>
    <url>/2023/07/05/grid/</url>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7222931416081580091">grid 栅格布局（图文并茂） - 掘金 (juejin.cn)</a></p><html lang="zn">  <body>    <div class="grid-container">      <div class="left">left</div>      <div class="bottom">bottom</div>      <div class="right">right</div>      <div class="top">top</div>      <div class="middle">middle</div>    </div>    <style>      .grid-container {        width: 50vw;        height: 50vh;        background-color: bisque;        display: grid;        grid-template-columns: 1fr 1fr 1fr;        grid-template-rows: 1fr 1fr 1fr;        grid-template-areas:          'left top top'          'left middle right'          'bottom bottom right';      }      .left {        background-color: brown;        margin: 5px;        grid-area: left;      }      .bottom {        grid-area: bottom;        margin: 5px;        background-color: brown;      }      .right {        margin: 5px;        grid-area: right;        background-color: brown;      }      .top {        margin: 5px;        grid-area: top;        background-color: brown;      }      .middle {        margin: 5px;        grid-area: middle;        background-color: brown;      }    </style>  </body></html>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>flex布局的一些属性</title>
    <link href="/2023/06/28/flex/"/>
    <url>/2023/06/28/flex/</url>
    
    <content type="html"><![CDATA[<p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写, 默认值是0 1 auto。<br>而flex: auto是根据内容的大小来分，不是均分的（除非内容都是一样，才均分）<br><strong>flex: 1</strong><br>flex: 1, 对应的是1 1 0%, 相当于可扩大，可缩小，flex-basis为0%<br>flex: 1 不管内容多少，一般都是平分空间，空间大小都一致<br><strong>flex: auto</strong><br>flex: auto, 对应的是1 1 auto, 相当于可扩大，可缩小，flex-basis为auto</p><p><strong>flex: 0</strong><br>对应的是0 1 0%, 相当于不可扩大，可缩小，flex-basis为0%</p><p><strong>flex: none</strong><br>flex: none, 对应的是0 0 auto, 相当于不可扩大，不可缩小，flex-basis为auto</p><table><thead><tr><th align="left">语法</th><th align="left">等值</th></tr></thead><tbody><tr><td align="left">flex: initial</td><td align="left">flex: 0 1 auto</td></tr><tr><td align="left">flex: 0</td><td align="left">flex: 0 1 0%</td></tr><tr><td align="left">flex: none</td><td align="left">flex: 0 0 auto</td></tr><tr><td align="left">flex: 1</td><td align="left">flex: 1 1 0%</td></tr><tr><td align="left">flex: auto</td><td align="left">flex: 1 1 auto</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>任务输出时间</title>
    <link href="/2023/06/27/%E4%BB%BB%E5%8A%A1%E8%BE%93%E5%87%BA%E6%97%B6%E9%97%B4/"/>
    <url>/2023/06/27/%E4%BB%BB%E5%8A%A1%E8%BE%93%E5%87%BA%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<p>这是一个 promise 的代码执行结果的面试题，主要会出现 promise/async-await、setTimeout/setInterval。其中 async-await 是 promise 语法糖，所以逻辑是一样的。setInterval 和 setTimeout 的回调都是放在宏任务队列中，规则相同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>&#125;);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><ol><li>new Promise 时候马上执行</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;test&#x27;</span>)<br>  <span class="hljs-title function_">resolve</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><p>上面的代码执行时候，会立刻打印”test”，所以 Promise 实例化时候传入的回调是同步执行的。</p><p>resolve或者reject之后状态不再改变，但后面代码会执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;test&#x27;</span>);<br>    <span class="hljs-title function_">reject</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p>上面的Promise在回调中执行了resolve、打印”test”、reject，这3句代码都会执行，但是reject不会生效，因为执行resolve后promise状态已经变为fullfilled。</p><p><strong>事件循环</strong></p><ol><li><p>promise的then中的回调放入微任务队列，setTimeout放入宏任务队列，promise.catch的回调一样，也会放入微任务队列。</p></li><li><p>调用栈中代码执行完之后，先取微任务队列中的任务执行，直到微任务队列为空</p></li><li><p>微任务队列为空，取宏任务队列中的一个任务开始执行，然后重复上一步，直到宏任务队列为空</p></li></ol><p>可以简单描述为：一个宏任务 + 所有微任务 -&gt;一个宏任务 + 所有微任务……，循环往复。</p><p><strong>答案12534</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>十进制转十六进制</title>
    <link href="/2023/06/10/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/"/>
    <url>/2023/06/10/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>先来一个leetcode上的类似题目</p><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml">给定一个整数 num，将其转化为 7 进制，并以字符串形式输出。<br><br>示例 1:<br>输入: num = 100<br>输出: &quot;202&quot;<br><br>示例 2:<br>输入: num = -7<br>输出: &quot;-10&quot;<br><br>提示：<br>-107 &lt;= num &lt;= 107<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">num</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> convertToBase7 = <span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) &#123;<br>    <span class="hljs-keyword">if</span> (num === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;0&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> ifFushu = num &lt; <span class="hljs-number">0</span><br>    num = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(num)<br>    <span class="hljs-keyword">const</span> dig = []<br>    <span class="hljs-keyword">while</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>        dig.<span class="hljs-title function_">push</span>(num % <span class="hljs-number">7</span>)<br>        num = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(num / <span class="hljs-number">7</span>)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ifFushu) &#123;<br>        dig.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;-&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> dig.<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>&#125;;<br></code></pre></td></tr></table></figure><p>那么类比就是10除16直到结束，只要替换上面的除数即可。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>元素平滑上升</title>
    <link href="/2023/06/09/%E5%85%83%E7%B4%A0%E5%B9%B3%E6%B9%96%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
    <url>/2023/06/09/%E5%85%83%E7%B4%A0%E5%B9%B3%E6%B9%96%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isBelowViewport</span>(<span class="hljs-params">el</span>) &#123;<br>  <span class="hljs-keyword">const</span> rect = el.<span class="hljs-title function_">getBoundingClientRect</span>()<br>  <span class="hljs-keyword">return</span> rect.<span class="hljs-property">top</span> &gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span><br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DISTANCE</span> = <span class="hljs-number">150</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DURATION</span> = <span class="hljs-number">500</span><br><span class="hljs-keyword">const</span> animatinMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br><span class="hljs-comment">// const animatinMap = new weakMap()</span><br><span class="hljs-keyword">const</span> ob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(<span class="hljs-function">(<span class="hljs-params">entries</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> entry <span class="hljs-keyword">of</span> entries) &#123;<br>    <span class="hljs-keyword">if</span> (entry.<span class="hljs-property">isIntersecting</span>) &#123;<br>      <span class="hljs-keyword">const</span> animation = animatinMap.<span class="hljs-title function_">get</span>(entry.<span class="hljs-property">target</span>)<br>      animation.<span class="hljs-title function_">play</span>()<br>      ob.<span class="hljs-title function_">unobserve</span>(entry.<span class="hljs-property">target</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-title function_">defult</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params">el</span>)&#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isBelowViewport</span>(el)) &#123;<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>    <span class="hljs-keyword">const</span> animation = el.<span class="hljs-title function_">animate</span>(<br>      [<br>        &#123;<br>          <span class="hljs-attr">transform</span>: <span class="hljs-string">`translateY(<span class="hljs-subst">$&#123;DISTANCE&#125;</span>px)`</span>,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">transform</span>: <span class="hljs-string">`translateY(0)`</span>,<br>          <span class="hljs-attr">opacity</span>: <span class="hljs-number">1</span>,<br>        &#125;,<br>      ],<br>      &#123;<br>        <span class="hljs-attr">duration</span>: <span class="hljs-variable constant_">DURATION</span>,<br>        <span class="hljs-attr">easing</span>: <span class="hljs-string">&#x27;ease&#x27;</span>,<br>      &#125;<br>    )<br>    animation.<span class="hljs-title function_">pause</span>()<br>    ob.<span class="hljs-title function_">observe</span>(el)<br>    animatinMap.<span class="hljs-title function_">set</span>(el, animation)<br>  &#125;<br>  <span class="hljs-title function_">unmounted</span>(<span class="hljs-params">el</span>)&#123;<br>      ob.<span class="hljs-title function_">unobserve</span>(el)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><!DOCTYPE html><html lang="zn">  <head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title></title>  </head>  <body>    <div class="container">      <div class="item"></div>      <div class="item"></div>      <div class="item"></div>      <div class="item"></div>      <div class="item"></div>      <div class="item"></div>      <div class="item"></div>      <div class="item"></div>      <div class="item"></div>      <div class="item"></div>      <div class="item"></div>    </div>  </body>  <script>    function isBelowViewport(el) {      const rect = el.getBoundingClientRect()      return rect.top > window.innerHeight    }    const DISTANCE = 150    const DURATION = 500    const animatinMap = new Map()    // const animatinMap = new weakMap()    // if (!isBelowViewport(el)) {    //   return    // }    const ob = new IntersectionObserver((entries) => {      for (const entry of entries) {        if (entry.isIntersecting) {          const animation = animatinMap.get(entry.target)          animation.play()          ob.unobserve(entry.target)        }      }      console.log(entries)    })    const els = document.getElementsByClassName('item')    console.log(els)    window.onload = function () {      //vue也不需要      for (const el of els) {          if (!isBelowViewport(el)) {            // debugger            continue          }        //mounted 不需要for循环 以下需要写export default中        const animation = el.animate(          [            {              transform: `translateY(${DISTANCE}px)`,            },            {              transform: `translateY(0)`,              opacity: 1,            },          ],          {            duration: DURATION,            easing: 'ease',          }        )        animation.pause()        ob.observe(el)        animatinMap.set(el, animation)        console.log(animatinMap)      }    }    // unmounted(el){    //     ob.unobserve(el)    // }  </script></html><style>  .container {    height: 100%;    .item {      height: 300px;      width: 80%;      box-shadow: 0px 0px 10px #888888;      border-radius: 20px;      background-color: rgb(120, 190, 204);      margin: 10px auto;      &:nth-child(2n) {        background-color: rgb(115, 180, 153);      }    }  }</style>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nodejs批量下载图片</title>
    <link href="/2023/05/28/node%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87/"/>
    <url>/2023/05/28/node%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;request&#x27;</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> downloadPic = <span class="hljs-keyword">function</span> (<span class="hljs-params">src, dest</span>) &#123;<br>  <span class="hljs-title function_">request</span>(src)<br>    .<span class="hljs-title function_">pipe</span>(fs.<span class="hljs-title function_">createWriteStream</span>(dest))<br>    .<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;pic saved!&#x27;</span>)<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">const</span> srcDir =<br>  <span class="hljs-string">&#x27;https://www.apple.com/105/media/us/airpods-pro/2019/1299e2f5_9206_4470_b28e_08307a42f19b/anim/sequence/large/02-head-bob-turn/&#x27;</span><br><span class="hljs-comment">//   这里是苹果的一些宣传图</span><br><span class="hljs-keyword">const</span> discDir = path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./images/&#x27;</span>)<br><span class="hljs-keyword">const</span> imgSuffix = <span class="hljs-string">&#x27;.jpg&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">NMAX</span> = <span class="hljs-number">300</span><br><span class="hljs-keyword">let</span> f, s, d<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable constant_">NMAX</span>; i++) &#123;<br>  f = (<span class="hljs-string">&#x27;&#x27;</span> + i).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;0&#x27;</span>) + imgSuffix<br>  s = srcDir + f<br>  d = path.<span class="hljs-title function_">resolve</span>(discDir, f)<br><br>  <span class="hljs-title function_">downloadPic</span>(s, d) <span class="hljs-comment">// 把 s 下载到 d</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用冻结对象提升效率</title>
    <link href="/2023/05/27/objectFreeze/"/>
    <url>/2023/05/27/objectFreeze/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>数据量大但是数据只是展示，不涉及双向绑定的时候，可以使用<code>Object.freeze()</code>来告诉vue不进行双向绑定的操作</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>辗转相除</title>
    <link href="/2023/05/25/%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4/"/>
    <url>/2023/05/25/%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4/</url>
    
    <content type="html"><![CDATA[<p>对于字符串  s 和  t，只有在  s = t + … + t（t 自身连接 1 次或多次）时，我们才认定  “t 能除尽 s”。</p><p>给定两个字符串  str1  和  str2 。返回 最长字符串  x，要求满足  x 能除尽 str1 且 x 能除尽 str2 。</p><p>示例 1：<br>输入：str1 = “ABCABC”, str2 = “ABC”<br>输出：”ABC”</p><p>示例 2：<br>输入：str1 = “ABABAB”, str2 = “ABAB”<br>输出：”AB”</p><p>示例 3：<br>输入：str1 = “LEET”, str2 = “CODE”<br>输出：””</p><p>提示：<br>1 &lt;= str1.length, str2.length &lt;= 1000<br>str1 和 str2 由大写英文字母组成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">str1</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">str2</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> gcdOfStrings = <span class="hljs-keyword">function</span> (<span class="hljs-params">str1, str2</span>) &#123;<br>    <span class="hljs-keyword">if</span> (str1 + str2 !== str2 + str1) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">gcd</span> = (<span class="hljs-params">a, b</span>) =&gt; (<span class="hljs-number">0</span> === b ? a : <span class="hljs-title function_">gcd</span>(b, a % b))<br>    <span class="hljs-keyword">return</span> str1.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_">gcd</span>(str1.<span class="hljs-property">length</span>, str2.<span class="hljs-property">length</span>))<br>&#125;;<br></code></pre></td></tr></table></figure><p>substring() 方法用于提取字符串中介于两个指定下标之间的字符。</p><p>substring() 方法返回的子串包括 开始 处的字符，但不包括 结束 处的字符。<br>string.substring(from, to)</p><table><thead><tr><th>from 必需</th><th>一个非负的整数，规定要提取的子串的第一个字符在 string Object 中的位置。</th></tr></thead><tbody><tr><td>to 可选</td><td>一个非负的整数，比要提取的子串的最后一个字符在 string Object 中的位置多 <br>如果省略该参数，那么返回的子串会一直到字符串的结尾。</td></tr></tbody></table><p>欧几里得算法又称辗转相除法，是指用于计算两个非负整数a，b的最大公约数。应用领域有数学和计算机两个方面。计算公式gcd(a,b) = gcd(b,a mod b)。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>大转盘</title>
    <link href="/2022/09/02/wheel/"/>
    <url>/2022/09/02/wheel/</url>
    
    <content type="html"><![CDATA[<p><a href="https://shiyanmaia.github.io/Wheel/">大转盘</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>虚拟滚动</title>
    <link href="/2022/08/19/virtual-scroller/"/>
    <url>/2022/08/19/virtual-scroller/</url>
    
    <content type="html"><![CDATA[<p><a href="https://shiyanmaia.github.io/2021/06/11/data%E8%BF%87%E5%A4%9A/">el-select大数据量渲染慢导致页面卡顿的问题</a></p><p>“el-select大数据量渲染慢导致页面卡顿的问题”，有点类似上述问题，但是如果还是加载了很多数据，依然会造成卡顿，虚拟滚动比较好的解决了这个问题。只呈现可见项目的虚拟滚动条，当用户滚动时，会重用所有组件和 DOM 节点。</p><p>vue-virtual-scroll-list或者vue-virtual-scroller</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install --save vue-virtual-scroller<br>导入的同时包括如下<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;vue-virtual-scroller/dist/vue-virtual-scroller.css&#x27;</span><br></code></pre></td></tr></table></figure><p>vue-virtual-scroller提供了几个组件:</p><p>RecycleScroller是一个只呈现列表中可见项的组件。重用组件和dom元素，以尽可能提高效率和性能。</p><p>DynamicScroller是一个组件，封装了recyclescroler组件，并扩展了它的特性，包括动态大小管理。它的主要用例是当您事先不知道项目的大小时。动态滚动器在滚动过程中呈现新条目时自动“发现”条目维度。</p><p>DynamicScrollerItem必须将每个项包装在DynamicScrollerItem中以处理大小计算。</p><p>IdState是一个mixin，它简化了recyclescroler中重用组件的本地状态管理。</p>]]></content>
    
    
    <categories>
      
      <category>前端性能优化</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>深拷贝</title>
    <link href="/2022/08/12/deepcopy/"/>
    <url>/2022/08/12/deepcopy/</url>
    
    <content type="html"><![CDATA[<p>1、递归</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//函数拷贝</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">copyObj</span> = (<span class="hljs-params">obj = &#123;&#125;</span>) =&gt; &#123;<br>  <span class="hljs-comment">//变量先置空</span><br>  <span class="hljs-keyword">let</span> newobj = <span class="hljs-literal">null</span>;  <br>  <span class="hljs-comment">//判断是否需要继续进行递归</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> (obj) == <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj !== <span class="hljs-literal">null</span>) &#123;<br>    newobj = obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span> ? [] : &#123;&#125;;<br>    <span class="hljs-comment">//进行下一层递归克隆</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>      newobj[i] = <span class="hljs-title function_">copyObj</span>(obj[i])<br>    &#125;<br>    <span class="hljs-comment">//如果不是对象直接赋值</span><br>  &#125; <span class="hljs-keyword">else</span> newobj = obj;<br>  <span class="hljs-keyword">return</span> newobj;    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClode</span>(<span class="hljs-params">obj, cache = []</span>) &#123;<br><br><br><span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">null</span> || <span class="hljs-keyword">typeof</span> obj != <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> obj<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(obj) === <span class="hljs-string">&#x27;[object Date]&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(obj)<br><span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(obj) === <span class="hljs-string">&#x27;[object RegExp]&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(obj)<br><span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(obj) === <span class="hljs-string">&#x27;[object Error]&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(obj)<br><br><br><span class="hljs-keyword">let</span> item = cache.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">origin</span> === obj)[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">if</span> (item) <span class="hljs-keyword">return</span> item.<span class="hljs-property">newObj</span><br><br><span class="hljs-keyword">let</span> newObj = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj) ? [] : &#123;&#125;<br><br>cache.<span class="hljs-title function_">push</span>(&#123;<br><span class="hljs-attr">origin</span>: obj,<br>newObj<br>&#125;)<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj[key] == <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>newObj[key] = <span class="hljs-title function_">deepClode</span>(obj[key], cache)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>newObj[key] = obj[key]<br>&#125;<br>&#125;);<br><span class="hljs-keyword">return</span> newObj<br>&#125;<br></code></pre></td></tr></table></figure><p>2、JSON.ststringify</p><p>如果对象内容项为undefined，null，Date，RegExp，function，error的时候。使用JSON.stringify()进行拷贝就会出问题了。</p><p>3、lodash中的cloneDeep()</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端旋转 放大缩小 移动</title>
    <link href="/2022/08/03/%E6%97%8B%E8%BD%AC/"/>
    <url>/2022/08/03/%E6%97%8B%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js">rotate (e, command) &#123;<br>    <span class="hljs-comment">// const odiv = e.target // 获取目标元素</span><br>    <span class="hljs-keyword">const</span> faterDiv = e.<span class="hljs-property">target</span>.<span class="hljs-property">parentNode</span>.<span class="hljs-property">offsetParent</span> <span class="hljs-comment">// 获取目标元素</span><br>    <span class="hljs-keyword">const</span> pointA = &#123; <span class="hljs-comment">// 元素中心点 元素1/2自身宽高 + 元素的定位</span><br>        <span class="hljs-attr">X</span>: faterDiv.<span class="hljs-property">offsetWidth</span> / <span class="hljs-number">2</span> + faterDiv.<span class="hljs-property">offsetLeft</span> + faterDiv.<span class="hljs-property">parentNode</span>.<span class="hljs-property">offsetLeft</span>,<br>        <span class="hljs-attr">Y</span>: faterDiv.<span class="hljs-property">offsetHeight</span> / <span class="hljs-number">2</span> + faterDiv.<span class="hljs-property">offsetTop</span> + faterDiv.<span class="hljs-property">parentNode</span>.<span class="hljs-property">offsetTop</span><br>    &#125;<br>    <span class="hljs-comment">// 需要持续增加几次parentNode的offset的相对位置，需要用它计算a的点</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pointA)<br><br>    <span class="hljs-keyword">const</span> pointB = &#123;<br>        <span class="hljs-attr">X</span>: e.<span class="hljs-property">pageX</span>,<br>        <span class="hljs-attr">Y</span>: e.<span class="hljs-property">pageY</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> pointC = &#123;&#125; <span class="hljs-comment">// A,B,C分别代表中心点，起始点，结束点坐标</span><br>    <span class="hljs-comment">// // 这里通过鼠标的移动获取起始点和结束点</span><br>    <span class="hljs-comment">// const typeMouse = false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pointA, pointB)<br>    <span class="hljs-keyword">let</span> allA = <span class="hljs-number">0</span> <span class="hljs-comment">// 存放鼠标旋转总共的度数</span><br>    <span class="hljs-comment">// const count = 0</span><br>    <span class="hljs-comment">// // 元素跟随鼠标移动旋转</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123; <span class="hljs-comment">// 鼠标按下并移动的事件</span><br>        <span class="hljs-comment">// 用鼠标的位置减去鼠标相对元素的位置，得到元素的位置</span><br>        pointC.<span class="hljs-property">X</span> = e.<span class="hljs-property">pageX</span><br>        pointC.<span class="hljs-property">Y</span> = e.<span class="hljs-property">pageY</span><span class="hljs-comment">// 获取结束点坐标</span><br>        <span class="hljs-comment">// 计算出旋转角度</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">AB</span> = &#123;&#125;<br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">AC</span> = &#123;&#125;<br>        <span class="hljs-variable constant_">AB</span>.<span class="hljs-property">X</span> = (pointB.<span class="hljs-property">X</span> - pointA.<span class="hljs-property">X</span>)<br>        <span class="hljs-variable constant_">AB</span>.<span class="hljs-property">Y</span> = (pointB.<span class="hljs-property">Y</span> - pointA.<span class="hljs-property">Y</span>)<br>        <span class="hljs-variable constant_">AC</span>.<span class="hljs-property">X</span> = (pointC.<span class="hljs-property">X</span> - pointA.<span class="hljs-property">X</span>)<br>        <span class="hljs-variable constant_">AC</span>.<span class="hljs-property">Y</span> = (pointC.<span class="hljs-property">Y</span> - pointA.<span class="hljs-property">Y</span>) <span class="hljs-comment">// 分别求出AB,AC的向量坐标表示</span><br>        <span class="hljs-keyword">const</span> direct = (<span class="hljs-variable constant_">AB</span>.<span class="hljs-property">X</span> * <span class="hljs-variable constant_">AC</span>.<span class="hljs-property">Y</span>) - (<span class="hljs-variable constant_">AB</span>.<span class="hljs-property">Y</span> * <span class="hljs-variable constant_">AC</span>.<span class="hljs-property">X</span>) <span class="hljs-comment">// AB与AC叉乘求出逆时针还是顺时针旋转</span><br>        <span class="hljs-keyword">const</span> lengthAB = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(pointA.<span class="hljs-property">X</span> - pointB.<span class="hljs-property">X</span>, <span class="hljs-number">2</span>) + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(pointA.<span class="hljs-property">Y</span> - pointB.<span class="hljs-property">Y</span>, <span class="hljs-number">2</span>))<br>        <span class="hljs-keyword">const</span> lengthAC = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(pointA.<span class="hljs-property">X</span> - pointC.<span class="hljs-property">X</span>, <span class="hljs-number">2</span>) + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(pointA.<span class="hljs-property">Y</span> - pointC.<span class="hljs-property">Y</span>, <span class="hljs-number">2</span>))<br>        <span class="hljs-keyword">const</span> lengthBC = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(pointB.<span class="hljs-property">X</span> - pointC.<span class="hljs-property">X</span>, <span class="hljs-number">2</span>) + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(pointB.<span class="hljs-property">Y</span> - pointC.<span class="hljs-property">Y</span>, <span class="hljs-number">2</span>))<br>        <span class="hljs-keyword">const</span> cosA = (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(lengthAB, <span class="hljs-number">2</span>) + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(lengthAC, <span class="hljs-number">2</span>) - <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(lengthBC, <span class="hljs-number">2</span>)) / (<span class="hljs-number">2</span> * lengthAB * lengthAC) <span class="hljs-comment">//   余弦定理求出旋转角</span><br>        <span class="hljs-keyword">const</span> angleA = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">acos</span>(cosA) * <span class="hljs-number">180</span> / <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>)<br>        <span class="hljs-keyword">if</span> (direct &lt; <span class="hljs-number">0</span>) &#123;<br>        allA = -angleA + (<span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">rotation</span> || <span class="hljs-number">0</span>) <span class="hljs-comment">// 叉乘结果为负表示逆时针旋转， 逆时针旋转减度数</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>        allA = angleA + (<span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">rotation</span> || <span class="hljs-number">0</span>) <span class="hljs-comment">// 叉乘结果为正表示顺时针旋转，顺时针旋转加度数</span><br>        &#125;<br>        faterDiv.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">&#x27;rotate(&#x27;</span> + allA + <span class="hljs-string">&#x27;deg)&#x27;</span><br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// console.log(this.activeId, this.positionX, this.positionY)</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-literal">null</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-literal">null</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">rotation</span> = allA<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">sync</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>)<br>        <span class="hljs-comment">// this.$emit(command, this.activeId, allA)</span><br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs js">resizeAction (e, options = &#123;&#125;) &#123;<br>    <span class="hljs-comment">// 存储此时鼠标点击的位置</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_x</span> = e.<span class="hljs-property">clientX</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_y</span> = e.<span class="hljs-property">clientY</span><br>    <span class="hljs-comment">// 存储此时点击开始时的位置坐标</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_top</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">top</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_left</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">left</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">moveHandler</span> = e =&gt; &#123;<br>        <span class="hljs-comment">// 计算移动的位置</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 根据options参数确定到底是修改宽高还是实际位置</span><br><span class="hljs-comment">         * changeX和changeY确定是垂直还是水平,还是同时</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">from</span> = options.<span class="hljs-property">from</span><br>        <span class="hljs-keyword">if</span> (options.<span class="hljs-property">changeX</span>) &#123;<br>        <span class="hljs-comment">// 修改水平宽度</span><br>        <span class="hljs-keyword">const</span> movedX = e.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">_x</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">from</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;left&#x27;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 修改水平坐标</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">left</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_left</span> + movedX<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">widthX</span> = -movedX<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">width</span> - movedX &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">left</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_left</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">widthX</span> = <span class="hljs-number">0</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">widthX</span> = movedX<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">width</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">widthX</span> &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">widthX</span> = <span class="hljs-number">0</span><br>            &#125;<br>        &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (options.<span class="hljs-property">changeY</span>) &#123;<br>        <span class="hljs-keyword">const</span> movedY = e.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">_y</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">from</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;top&#x27;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 修改垂直桌标</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">heightY</span> = -movedY<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">top</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_top</span> + movedY<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">height</span> - movedY &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">top</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_top</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">heightY</span> = <span class="hljs-number">0</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">heightY</span> = movedY<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">height</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">heightY</span> &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">heightY</span> = <span class="hljs-number">0</span><br>            &#125;<br>        &#125;<br>        &#125;<br>        <span class="hljs-comment">// 更新样式信息</span><br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 计算边界</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">mouseupHandler</span> = e =&gt; &#123;<br>        <span class="hljs-comment">// 移除两个处理事件</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, moveHandler)<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, mouseupHandler)<br>        <span class="hljs-comment">// emit最新位置信息到外部</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">height</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">height</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">heightY</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">width</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">width</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">widthX</span><br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">sync</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>)<br>        <span class="hljs-comment">// 置空位移数据</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">heightY</span> = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">widthX</span> = <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, moveHandler)<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, mouseupHandler)<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">startMove (event) &#123;<br>    <span class="hljs-comment">// 记录当前鼠标点击的xy坐标</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_x</span> = event.<span class="hljs-property">clientX</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_y</span> = event.<span class="hljs-property">clientY</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">moveHandler</span> = e =&gt; &#123;<br>        <span class="hljs-comment">// 计算移动的位置</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">movedX</span> = e.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">_x</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">movedY</span> = e.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">_y</span><br>        <span class="hljs-comment">// console.log(this.movedX, this.movedY)</span><br>        <span class="hljs-comment">// 更新样式信息</span><br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 计算边界</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">mouseupHandler</span> = e =&gt; &#123;<br>        <span class="hljs-comment">// 移除两个处理事件</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, moveHandler)<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, mouseupHandler)<br>        <span class="hljs-comment">// emit最新位置信息到外部</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">top</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">top</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">movedY</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">left</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>.<span class="hljs-property">left</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">movedX</span><br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">sync</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">innerValue</span>)<br>        <span class="hljs-comment">// 置空位移数据</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">movedX</span> = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">movedY</span> = <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, moveHandler)<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, mouseupHandler)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>重排数组实现随机抽取</title>
    <link href="/2022/07/20/ArrayRandom/"/>
    <url>/2022/07/20/ArrayRandom/</url>
    
    <content type="html"><![CDATA[<p>类似随机交换数组位置，洗牌以后，截取需要的长度，实现随机抽取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> shuffle = <span class="hljs-keyword">function</span>(<span class="hljs-params">o</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j, x, i = o.<span class="hljs-property">length</span>; i; j = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * i), x = o[--i], o[i] = o[j], o[j] = x);<br>    <span class="hljs-keyword">return</span> o<br>&#125;<br><span class="hljs-keyword">let</span> a = temp<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">shuffle</span>(a).<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">randowNum</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>el-element的dialog增加拖拽功能</title>
    <link href="/2022/07/05/el-element-dialog-drag/"/>
    <url>/2022/07/05/el-element-dialog-drag/</url>
    
    <content type="html"><![CDATA[<p>使用vue自定义指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;dialogDrag&#x27;</span>, &#123;<br>  <span class="hljs-title function_">bind</span>(<span class="hljs-params">el, binding, vnode, oldVnode</span>) &#123;<br>    <span class="hljs-keyword">const</span> dialogHeaderEl = el.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.el-dialog__header&#x27;</span>);<br>    <span class="hljs-keyword">const</span> dragDom = el.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.el-dialog&#x27;</span>);<br>    dialogHeaderEl.<span class="hljs-property">style</span>.<span class="hljs-property">cursor</span> = <span class="hljs-string">&#x27;move&#x27;</span>;<br>    <span class="hljs-comment">// 获取原有属性 ie dom元素.currentStyle 火狐谷歌 window.getComputedStyle(dom元素, null);</span><br>    <span class="hljs-keyword">const</span> sty = dragDom.<span class="hljs-property">currentStyle</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getComputedStyle</span>(dragDom, <span class="hljs-literal">null</span>);<br>    dialogHeaderEl.<span class="hljs-property">onmousedown</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 鼠标按下，计算当前元素距离可视区的距离</span><br>      <span class="hljs-keyword">const</span> disX = e.<span class="hljs-property">clientX</span> - dialogHeaderEl.<span class="hljs-property">offsetLeft</span>;<br>      <span class="hljs-keyword">const</span> disY = e.<span class="hljs-property">clientY</span> - dialogHeaderEl.<span class="hljs-property">offsetTop</span>;<br>      <span class="hljs-comment">// 获取到的值带px 正则匹配替换</span><br>      <span class="hljs-keyword">let</span> styL, styT;<br>      <span class="hljs-comment">// 注意在ie中 第一次获取到的值为组件自带50% 移动之后赋值为px</span><br>      <span class="hljs-keyword">if</span> (sty.<span class="hljs-property">left</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;%&#x27;</span>)) &#123;<br>        styL = +<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientWidth</span> * (+sty.<span class="hljs-property">left</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\%/g</span>, <span class="hljs-string">&#x27;&#x27;</span>) / <span class="hljs-number">100</span>);<br>        styT = +<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span> * (+sty.<span class="hljs-property">top</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\%/g</span>, <span class="hljs-string">&#x27;&#x27;</span>) / <span class="hljs-number">100</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        styL = +sty.<span class="hljs-property">left</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\px/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>        styT = +sty.<span class="hljs-property">top</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\px/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>      &#125;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-comment">// 通过事件委托，计算移动的距离</span><br>        <span class="hljs-keyword">const</span> l = e.<span class="hljs-property">clientX</span> - disX;<br>        <span class="hljs-keyword">const</span> t = e.<span class="hljs-property">clientY</span> - disY;<br>        <span class="hljs-comment">// 移动当前元素</span><br>        dragDom.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;l + styL&#125;</span>px`</span>;<br>        dragDom.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;t + styT&#125;</span>px`</span>;<br>        <span class="hljs-comment">// 将此时的位置传出去</span><br>        <span class="hljs-comment">// binding.value(&#123;x:e.pageX,y:e.pageY&#125;)</span><br>      &#125;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-literal">null</span>;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-literal">null</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>接着引入使用即可<br>最后在<code>&lt;el-dialog&gt;</code>元素中直接加入使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">v-dialogDrag</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用canvas画个圆形进度条</title>
    <link href="/2022/06/29/circle-draw/"/>
    <url>/2022/06/29/circle-draw/</url>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;medium-graph&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background:red&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;medium-graph-canvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;292&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;292&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> medium_canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;medium-graph-canvas&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawMain</span>(medium_canvas, <span class="hljs-number">60</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;#435377&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">drawMain</span>(<span class="hljs-params">drawing_elem, percent, colornums, bgcolor</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">            @drawing_elem: 绘制对象</span></span><br><span class="hljs-comment"><span class="language-javascript">            @percent：绘制圆环百分比, 范围[0, 100]</span></span><br><span class="hljs-comment"><span class="language-javascript">            @forecolor: 绘制圆环的前景色，颜色代码</span></span><br><span class="hljs-comment"><span class="language-javascript">            @bgcolor: 绘制圆环的背景色，颜色代码</span></span><br><span class="hljs-comment"><span class="language-javascript">            @colornums: 作为参数传入，绘制哪个颜色</span></span><br><span class="hljs-comment"><span class="language-javascript">        */</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> context = drawing_elem.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> center_x = drawing_elem.<span class="hljs-property">width</span> / <span class="hljs-number">2</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> center_y = drawing_elem.<span class="hljs-property">height</span> / <span class="hljs-number">2</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> rad = (<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>) / <span class="hljs-number">100</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> speed = <span class="hljs-number">0</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 绘制背景圆圈</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">backgroundCircle</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            context.<span class="hljs-title function_">save</span>()</span><br><span class="language-javascript">            context.<span class="hljs-title function_">beginPath</span>()</span><br><span class="language-javascript">            context.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">8</span> <span class="hljs-comment">// 设置线宽</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> radius = center_x - context.<span class="hljs-property">lineWidth</span></span><br><span class="language-javascript">            context.<span class="hljs-property">lineCap</span> = <span class="hljs-string">&#x27;round&#x27;</span></span><br><span class="language-javascript">            context.<span class="hljs-property">strokeStyle</span> = bgcolor</span><br><span class="language-javascript">            context.<span class="hljs-title function_">arc</span>(center_x, center_y, radius - <span class="hljs-number">14</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>, <span class="hljs-literal">false</span>)</span><br><span class="language-javascript">            context.<span class="hljs-title function_">stroke</span>()</span><br><span class="language-javascript">            context.<span class="hljs-title function_">closePath</span>()</span><br><span class="language-javascript">            context.<span class="hljs-title function_">restore</span>()</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 绘制运动圆环</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">foregroundCircle</span>(<span class="hljs-params">n</span>) &#123;</span><br><span class="language-javascript">            context.<span class="hljs-title function_">save</span>()</span><br><span class="language-javascript">            <span class="hljs-comment">// context.strokeStyle = forecolor //决定圆环颜色</span></span><br><span class="language-javascript">            context.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">22</span></span><br><span class="language-javascript">            context.<span class="hljs-property">lineCap</span> = <span class="hljs-string">&#x27;round&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> radius = center_x - context.<span class="hljs-property">lineWidth</span></span><br><span class="language-javascript">            context.<span class="hljs-title function_">beginPath</span>()</span><br><span class="language-javascript">            <span class="hljs-comment">// if (colornums == 1) &#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     var g = context.createLinearGradient(0, 0, 180, 0) // 创建渐变对象  渐变开始点和渐变结束点</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     g.addColorStop(0, &#x27;#64C58F&#x27;) // 添加颜色点</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     g.addColorStop(1, &#x27;#0084FF&#x27;) // 添加颜色点</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     context.strokeStyle = g // 使用渐变对象作为圆环的颜色</span></span><br><span class="language-javascript">            <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (colornums == <span class="hljs-number">2</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> g = context.<span class="hljs-title function_">createLinearGradient</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">180</span>, <span class="hljs-number">0</span>)</span><br><span class="language-javascript">                g.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;#E7954C&#x27;</span>)</span><br><span class="language-javascript">                g.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;#D36638&#x27;</span>)</span><br><span class="language-javascript">                context.<span class="hljs-property">strokeStyle</span> = g</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// if (colornums == 3) &#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     var g = context.createLinearGradient(0, 0, 180, 0)</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     g.addColorStop(0, &#x27;#FF7C78&#x27;) //</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     g.addColorStop(1, &#x27;#FD413E&#x27;)</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     context.strokeStyle = g</span></span><br><span class="language-javascript">            <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            context.<span class="hljs-title function_">arc</span>(</span><br><span class="language-javascript">            center_x,</span><br><span class="language-javascript">            center_y,</span><br><span class="language-javascript">            radius,</span><br><span class="language-javascript">            -<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> / <span class="hljs-number">4</span>,</span><br><span class="language-javascript">            -<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> / <span class="hljs-number">4</span> + n * rad,</span><br><span class="language-javascript">            <span class="hljs-literal">false</span></span><br><span class="language-javascript">            ) <span class="hljs-comment">// 用于绘制圆弧context.arc(x坐标，y坐标，半径，起始角度，终止角度，顺时针/逆时针)</span></span><br><span class="language-javascript">            context.<span class="hljs-title function_">stroke</span>()</span><br><span class="language-javascript">            context.<span class="hljs-title function_">closePath</span>()</span><br><span class="language-javascript">            context.<span class="hljs-title function_">restore</span>()</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 绘制文字</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">text</span>(<span class="hljs-params">n</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// context.save() // save和restore可以保证样式属性只运用于该段canvas元素</span></span><br><span class="language-javascript">            <span class="hljs-comment">// context.fillStyle = forecolor</span></span><br><span class="language-javascript">            <span class="hljs-comment">// var font_size = 40</span></span><br><span class="language-javascript">            <span class="hljs-comment">// context.font = font_size + &#x27;px Helvetica&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-comment">// var text_width = context.measureText(n.toFixed(0) + &#x27;%&#x27;).width</span></span><br><span class="language-javascript">            <span class="hljs-comment">// context.fillText(n.toFixed(0) + &#x27;%&#x27;, center_x - text_width / 2, center_y + font_size / 2)</span></span><br><span class="language-javascript">            <span class="hljs-comment">// context.restore()</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 执行动画</span></span><br><span class="language-javascript">        (<span class="hljs-keyword">function</span> <span class="hljs-title function_">drawFrame</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (speed &lt;= percent) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(drawFrame)</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            context.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, drawing_elem.<span class="hljs-property">width</span>, drawing_elem.<span class="hljs-property">height</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// backgroundCircle()</span></span><br><span class="language-javascript">            <span class="hljs-comment">// text(speed)</span></span><br><span class="language-javascript">            <span class="hljs-title function_">foregroundCircle</span>(speed)</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (speed &gt;= percent) &#123;</span><br><span class="language-javascript">                speed ++</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                speed += <span class="hljs-number">1</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)()</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以下是效果：</p><div class="medium-graph" style="width: fit-content; margin: 0 auto;">    <canvas id="medium-graph-canvas" width="292" height="292"></canvas></div><script>var medium_canvas = document.getElementById('medium-graph-canvas')    this.drawMain(medium_canvas, 60, 2, '#435377')    function drawMain(drawing_elem, percent, colornums, bgcolor) {        /*            @drawing_elem: 绘制对象            @percent：绘制圆环百分比, 范围[0, 100]            @forecolor: 绘制圆环的前景色，颜色代码            @bgcolor: 绘制圆环的背景色，颜色代码            @colornums: 作为参数传入，绘制哪个颜色        */        var context = drawing_elem.getContext('2d')        var center_x = drawing_elem.width / 2        var center_y = drawing_elem.height / 2        var rad = (Math.PI * 2) / 100        var speed = 0        // 绘制背景圆圈        function backgroundCircle() {            context.save()            context.beginPath()            context.lineWidth = 8 // 设置线宽            var radius = center_x - context.lineWidth            context.lineCap = 'round'            context.strokeStyle = bgcolor            context.arc(center_x, center_y, radius - 14, 0, Math.PI * 2, false)            context.stroke()            context.closePath()            context.restore()        }        // 绘制运动圆环        function foregroundCircle(n) {            context.save()            // context.strokeStyle = forecolor //决定圆环颜色            context.lineWidth = 22            context.lineCap = 'round'            var radius = center_x - context.lineWidth            context.beginPath()            // if (colornums == 1) {            //     var g = context.createLinearGradient(0, 0, 180, 0) // 创建渐变对象  渐变开始点和渐变结束点            //     g.addColorStop(0, '#64C58F') // 添加颜色点            //     g.addColorStop(1, '#0084FF') // 添加颜色点            //     context.strokeStyle = g // 使用渐变对象作为圆环的颜色            // }            if (colornums == 2) {                var g = context.createLinearGradient(0, 0, 180, 0)                g.addColorStop(0, '#E7954C')                g.addColorStop(1, '#D36638')                context.strokeStyle = g            }            // if (colornums == 3) {            //     var g = context.createLinearGradient(0, 0, 180, 0)            //     g.addColorStop(0, '#FF7C78') //            //     g.addColorStop(1, '#FD413E')            //     context.strokeStyle = g            // }            context.arc(            center_x,            center_y,            radius,            -Math.PI / 4,            -Math.PI / 4 + n * rad,            false            ) // 用于绘制圆弧context.arc(x坐标，y坐标，半径，起始角度，终止角度，顺时针/逆时针)            context.stroke()            context.closePath()            context.restore()        }        // 绘制文字        function text(n) {            // context.save() // save和restore可以保证样式属性只运用于该段canvas元素            // context.fillStyle = forecolor            // var font_size = 40            // context.font = font_size + 'px Helvetica'            // var text_width = context.measureText(n.toFixed(0) + '%').width            // context.fillText(n.toFixed(0) + '%', center_x - text_width / 2, center_y + font_size / 2)            // context.restore()        }        // 执行动画        (function drawFrame() {            if (speed <= percent) {                window.requestAnimationFrame(drawFrame)            } else {                return false            }            context.clearRect(0, 0, drawing_elem.width, drawing_elem.height)            // backgroundCircle()            // text(speed)            foregroundCircle(speed)            if (speed >= percent) {                speed ++            } else {                speed += 1            }        })()    }</script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>图表库推荐</title>
    <link href="/2022/06/09/charts%E6%8E%A8%E8%8D%90/"/>
    <url>/2022/06/09/charts%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<p><a href="https://nivo.rocks/components" title="nivo">nivo</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>IntersectionObserver</title>
    <link href="/2022/05/25/intersertion/"/>
    <url>/2022/05/25/intersertion/</url>
    
    <content type="html"><![CDATA[<p>IntersectionObserver，它可以用来监听元素是否进入了设备的可视区域之内，而不需要频繁的计算来做这个判断。</p><p><code>var observer = new IntersectionObserver(callback,options);</code></p><p>callback 是当被监听元素的可见性变化时，触发的回调函数。<br>options 是一个配置参数，可选，有默认的属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(<span class="hljs-function">(<span class="hljs-params">changes</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> change <span class="hljs-keyword">of</span> changes) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(change.<span class="hljs-property">time</span>)<br>    <span class="hljs-comment">// Timestamp when the change occurred</span><br>    <span class="hljs-comment">// 当可视状态变化时，状态发送改变的时间戳</span><br>    <span class="hljs-comment">// 对比时间为，实例化的时间，</span><br>    <span class="hljs-comment">// 比如，值为1000时，表示在IntersectionObserver实例化的1秒钟之后，触发该元素的可视性变化</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(change.<span class="hljs-property">rootBounds</span>)<br>    <span class="hljs-comment">// Unclipped area of root</span><br>    <span class="hljs-comment">// 根元素的矩形区域信息，即为getBoundingClientRect方法返回的值</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(change.<span class="hljs-property">boundingClientRect</span>)<br>    <span class="hljs-comment">// target.boundingClientRect()</span><br>    <span class="hljs-comment">// 目标元素的矩形区域的信息</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(change.<span class="hljs-property">intersectionRect</span>)<br>    <span class="hljs-comment">// boundingClientRect, clipped by its containing block ancestors,</span><br>    <span class="hljs-comment">// and intersected with rootBounds</span><br>    <span class="hljs-comment">// 目标元素与视口（或根元素）的交叉区域的信息</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(change.<span class="hljs-property">intersectionRatio</span>)<br>    <span class="hljs-comment">// Ratio of intersectionRect area to boundingClientRect area</span><br>    <span class="hljs-comment">// 目标元素的可见比例，即intersectionRect占boundingClientRect的比例，</span><br>    <span class="hljs-comment">// 完全可见时为1，完全不可见时小于等于0</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(change.<span class="hljs-property">target</span>)<br>    <span class="hljs-comment">// the Element target</span><br>    <span class="hljs-comment">// 被观察的目标元素，是一个 DOM 节点对象</span><br>    <span class="hljs-comment">// 当前可视区域正在变化的元素</span><br>  &#125;<br>&#125;, &#123;&#125;)<br><br><span class="hljs-comment">// Watch for intersection events on a specific target Element.</span><br><span class="hljs-comment">// 对元素target添加监听，当target元素变化时，就会触发上述的回调</span><br>observer.<span class="hljs-title function_">observe</span>(target)<br><br><span class="hljs-comment">// Stop watching for intersection events on a specific target Element.</span><br><span class="hljs-comment">// 移除一个监听，移除之后，target元素的可视区域变化，将不再触发前面的回调函数</span><br>observer.<span class="hljs-title function_">unobserve</span>(target)<br><br><span class="hljs-comment">// Stop observing threshold events on all target elements.</span><br><span class="hljs-comment">// 停止所有的监听</span><br>observer.<span class="hljs-title function_">disconnect</span>()<br></code></pre></td></tr></table></figure><p>options是可以选择设置的，即便我们不设置该参数，也会有一个默认的属性，这个默认的属性，就定义在了IntersectionObserver的原型链中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">observe</span>(target)<br><span class="hljs-comment">// function，传入一个参数，原生的DOM对象，一个将要被监听的DOM元素</span><br><span class="hljs-comment">// 添加一个监听元素，</span><br><br>root<br><span class="hljs-comment">// DOM元素，但默认值为null，也就是视口区域</span><br><span class="hljs-comment">// 表示监听的可视区域为整个视口，也就是浏览器的可视区域</span><br><span class="hljs-comment">// 如果设置了DOM元素，那么视口就变为该元素（即，就算元素在屏幕的可视区域，但是不在该DOM元素的可视区域，仍然不会触发可视性变化）</span><br><br>rootMargin<br><span class="hljs-comment">// 类似于css的margin属性，可以设置四个属性。</span><br><span class="hljs-comment">// 该属性默认值为0px 0px 0px 0px，如果设置之后，会影响触发回调的时间</span><br><br>takeRecords<br><span class="hljs-comment">// 该属性，目前没有找到是干嘛的，返回一个数组，而且一直为空数组</span><br><br>thresholds<br><span class="hljs-comment">// Array</span><br><span class="hljs-comment">// 默认值为[0]，</span><br><span class="hljs-comment">// 当元素的进入可视区域的百分比达到这个参数的设置值得时候</span><br><span class="hljs-comment">// 就会触发IntersectionObserver实例中的callback的回调函数</span><br><span class="hljs-comment">// 具体后面再看啦</span><br><br><span class="hljs-title function_">unobserve</span>(target)<br><span class="hljs-comment">// 解除target的元素的绑定</span><br></code></pre></td></tr></table></figure><p>root参数<br>根元素，可视性以哪个root元素，作为参考系，如果不设置，那么可视区域，就是整个视图的区域，那么只要元素在该区域可视之后，就可以触发监听的回调函数。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Github Actions实现持续部署</title>
    <link href="/2022/05/14/githubActions/"/>
    <url>/2022/05/14/githubActions/</url>
    
    <content type="html"><![CDATA[<p>travis-ci不再免费了，改成10000点的部署积分，想换一个持续部署博客的CI，看了一下很多人在用Github Actions，决定换成这个，以下是简单地一个配置和使用</p><ol><li><p>github actions的.yml文件主要是在.github/workflow/的下面</p></li><li><p>以下是github actions的一些配置说明：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Action 的名字</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">Auto</span> <span class="hljs-string">Deploy</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-comment"># 触发条件1：master 分支收到 push 后执行任务。</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br><br><span class="hljs-comment"># 环境变量</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">on</span> <span class="hljs-string">node</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">and</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.os</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">github.event.repository.owner.id</span> <span class="hljs-string">==</span> <span class="hljs-string">github.event.sender.id</span><br>    <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">os:</span> [<span class="hljs-string">ubuntu-18.04</span>]<br>        <span class="hljs-attr">node_version:</span> [<span class="hljs-number">14.16</span><span class="hljs-number">.0</span>]<br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@master</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm install hexo-cli -g</span><br><span class="hljs-string">          npm install</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">hexo</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          hexo c</span><br><span class="hljs-string">          hexo g</span><br><span class="hljs-string"></span>          <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">hexo</span> <span class="hljs-string">blog</span><br>        <span class="hljs-attr">env:</span> <br>          <span class="hljs-comment"># Github 仓库</span><br>          <span class="hljs-attr">GITHUB_REPO:</span> <span class="hljs-string">github.com/shiyanmaia/shiyanmaia.github.io.git</span><br>          <span class="hljs-comment"># 将编译后的博客文件推送到指定仓库</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          cd ./public &amp;&amp; git init &amp;&amp; git add .</span><br><span class="hljs-string">          git config user.name &quot;github actions&quot;</span><br><span class="hljs-string">          git config user.email &quot;51024109+shiyanmaia@users.noreply.github.com&quot;</span><br><span class="hljs-string">          git add .</span><br><span class="hljs-string">          git commit -m &quot;GitHub Actions Auto Builder at $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;</span><br><span class="hljs-string">          git push --force --quiet &quot;https://$&#123;&#123; secrets.HEXO_DEPLOY_PRI &#125;&#125;@$GITHUB_REPO&quot; master:pg-page</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure></li><li><p>上面涉及了github配置personal access token，具体是在setting里的开发者选项的token，然后生成一个，然后去项目的secrets里配置密码变量，即上述的HEXO_DEPLOY_PRI。</p></li><li><p>然后actions就可以自动化部署了，但是我看网上还有直接使用hexo d来进行部署，是使用deploy key，私钥配置在这个自动化部署的源代码里，一个配置到需要部署项目的deploy key里，但是我试了一下两个项目（私有和公有）不能正常访问，这里实在是配置不出来就换了token的方法来进行直接部署。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vanta.js实现云朵漂浮</title>
    <link href="/2022/05/04/cloud/"/>
    <url>/2022/05/04/cloud/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><!DOCTYPE html><html lang="zn"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>clouds</title></head><body>    <div style="height: 400px;">        <div id="vantaRef"></div>    </div></body><script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r121/three.min.js"></script><script src="https://cdn.jsdelivr.net/npm/vanta@0.5.22/dist/vanta.clouds.min.js"></script><script>VANTA.CLOUDS({  el: "#vantaRef",  mouseControls: true,  touchControls: true,  gyroControls: false,  minHeight: document.body.offsetHeight,  minWidth: 200.00,  skyColor: 0x4893b6})</script></html>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>毕设地图（使用leaflet）</title>
    <link href="/2022/05/04/map/"/>
    <url>/2022/05/04/map/</url>
    
    <content type="html"><![CDATA[<p>毕设的地图，例子：<a href="https://shiyanmaia.github.io/map">map示例</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>UI组件设计</title>
    <link href="/2022/04/29/design/"/>
    <url>/2022/04/29/design/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.lightningdesignsystem.com/">https://www.lightningdesignsystem.com/</a> SaaS在各种场景下的应用以及使用的视觉交互规范</p><p>Fluent Design System 微软的组件设计库</p><p>Carbon Design System 北美设计风格</p><p>Material Design 谷歌的组件库</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端预览pdf、doc、video、audio</title>
    <link href="/2022/04/28/%E5%89%8D%E7%AB%AF%E9%A2%84%E8%A7%88pdf%E3%80%81doc%E3%80%81video%E3%80%81audio/"/>
    <url>/2022/04/28/%E5%89%8D%E7%AB%AF%E9%A2%84%E8%A7%88pdf%E3%80%81doc%E3%80%81video%E3%80%81audio/</url>
    
    <content type="html"><![CDATA[<p>video的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;video-player<br>    <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;video-player vjs-custom-skin&quot;</span><br>    ref=<span class="hljs-string">&quot;videoPlayer&quot;</span><br>    :playsinline=<span class="hljs-string">&quot;true&quot;</span><br>    :options=<span class="hljs-string">&quot;playerOptions&quot;</span><br>    &gt;<br>&lt;/video-player&gt;<br><br><span class="hljs-attr">playerOptions</span>: &#123;<br>        <span class="hljs-attr">playbackRates</span>: [<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">2.0</span>], <span class="hljs-comment">// 可选的播放速度</span><br>        <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 如果为true,浏览器准备好时开始回放。</span><br>        <span class="hljs-attr">muted</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 默认情况下将会消除任何音频。</span><br>        <span class="hljs-attr">loop</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否视频一结束就重新开始。</span><br>        <span class="hljs-attr">preload</span>: <span class="hljs-string">&#x27;auto&#x27;</span>, <span class="hljs-comment">// 自动播放策略，但是浏览器除非是访问很高的网站，其他是禁止自动播放，参见浏览器规则</span><br>        <span class="hljs-attr">language</span>: <span class="hljs-string">&#x27;zh-CN&#x27;</span>,<br>        <span class="hljs-attr">aspectRatio</span>: <span class="hljs-string">&#x27;16:9&#x27;</span>, <span class="hljs-comment">// 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如&quot;16:9&quot;或&quot;4:3&quot;）</span><br>        <span class="hljs-attr">fluid</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。</span><br>        <span class="hljs-attr">sources</span>: [<br>          &#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;video/mp4&#x27;</span>, <span class="hljs-comment">// 类型</span><br>            <span class="hljs-attr">src</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">newVideoUrl</span> ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">newVideoUrl</span> : <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">// url地址</span><br>          &#125;<br>        ],<br>        <span class="hljs-comment">// poster: &#x27;&#x27;, // 封面地址</span><br>        <span class="hljs-attr">notSupportedMessage</span>: <span class="hljs-string">&#x27;此视频暂无法播放，请稍后再试&#x27;</span>, <span class="hljs-comment">// 允许覆盖Video.js无法播放媒体源时显示的默认信息。</span><br>        <span class="hljs-attr">controlBar</span>: &#123;<br>          <span class="hljs-attr">timeDivider</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 当前时间和持续时间的分隔符</span><br>          <span class="hljs-attr">durationDisplay</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 显示持续时间</span><br>          <span class="hljs-attr">remainingTimeDisplay</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否显示剩余时间功能</span><br>          <span class="hljs-attr">fullscreenToggle</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 是否显示全屏按钮</span><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>具体参见npm 的 vue-video-player 组件</p><p>audio</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;div id=<span class="hljs-string">&quot;waveform&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;waveform&quot;</span>&gt;&lt;/div&gt;<br><br>    <span class="hljs-keyword">init</span> () &#123;<br>      <span class="hljs-keyword">this</span>.$nextTick(() =&gt; &#123;<br>        setTimeout(() =&gt; &#123;<br>          <span class="hljs-keyword">this</span>.wavesurferData = WaveSurfer.create(&#123;<br>            container: <span class="hljs-string">&#x27;#waveform&#x27;</span>,<br>            waveColor: <span class="hljs-string">&#x27;#409EFF&#x27;</span>,<br>            progressColor: <span class="hljs-string">&#x27;#9acbff&#x27;</span>,<br>            cursorColor: <span class="hljs-string">&#x27;#fff&#x27;</span>,<br>            height: <span class="hljs-number">80</span><br>          <span class="hljs-comment">// plugins: [RegionsPlugin.create()]</span><br>          &#125;)<br><br>          <span class="hljs-comment">// 加载成功</span><br>          <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.wavesurferData) &#123;<br>            <span class="hljs-keyword">this</span>.$services.exam.getFileDownloadId(<span class="hljs-keyword">this</span>._groupId, <span class="hljs-keyword">this</span>.speechId, <span class="hljs-keyword">this</span>.taskId, <span class="hljs-number">1</span>).then(res =&gt; &#123;<br>              <span class="hljs-comment">// debugger</span><br>              <span class="hljs-comment">// window.open(`$&#123;this.$axios.defaults.baseURL&#125;/speech/$&#123;res&#125;/$&#123;this.fileName&#125;/_download`, &#x27;_blank&#x27;)</span><br>              <span class="hljs-keyword">this</span>.$services.exam.getfile(res, <span class="hljs-keyword">this</span>.fileName).then((&#123;<span class="hljs-keyword">data</span>&#125;) =&gt; &#123;<br>                <span class="hljs-comment">// debugger</span><br>                <span class="hljs-comment">// this.newVideoUrl = data</span><br>                <span class="hljs-comment">// const url = window.URL.createObjectUrl(data)</span><br>                <span class="hljs-keyword">const</span> url = window.URL.createObjectURL(<span class="hljs-keyword">data</span>)<br><br>                <span class="hljs-keyword">if</span> (!url) &#123;<br>                  <span class="hljs-keyword">this</span>.$notify.warning(<span class="hljs-string">&#x27;未找到音频id&#x27;</span>)<br>                  <span class="hljs-keyword">return</span><br>                &#125;<br>                <span class="hljs-keyword">this</span>.wavesurferData.load(url)<br>                <span class="hljs-comment">// this.wavesurferData.on(&#x27;loading&#x27;, percents =&gt; &#123;</span><br>                <span class="hljs-comment">//   // 当前加载的进度</span><br>                <span class="hljs-comment">//   this.percent = percents</span><br>                <span class="hljs-comment">// &#125;)</span><br>                <span class="hljs-keyword">this</span>.wavesurferData.on(<span class="hljs-string">&#x27;ready&#x27;</span>, () =&gt; &#123;<br>                  <span class="hljs-keyword">this</span>.percent = <span class="hljs-literal">false</span><br>                &#125;)<br>              &#125;)<br>            &#125;)<br>          <span class="hljs-comment">// 加载时候</span><br>          &#125;<br>        &#125;, <span class="hljs-number">1000</span>)<br>        <span class="hljs-comment">// this.wavesurferData.on(&#x27;ready&#x27;, function () &#123;</span><br>        <span class="hljs-comment">//   this.wavesurferData.play()</span><br>        <span class="hljs-comment">// &#125;)</span><br>      &#125;)<br>    &#125;<br></code></pre></td></tr></table></figure><p>具体其他使用参见 wavesurfer.js’</p><p>pdf</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;pdf<br>    ref=<span class="hljs-string">&quot;pdf&quot;</span><br>    :src=<span class="hljs-string">&quot;pdfUrl&quot;</span><br>    :page=<span class="hljs-string">&quot;page&quot;</span><br>    :rotate=<span class="hljs-string">&quot;rotate&quot;</span><br>    @num-pages=<span class="hljs-string">&quot;numPages = $event&quot;</span><br>    @link-clicked=<span class="hljs-string">&quot;page = $event&quot;</span><br>    &gt;<br>&lt;/pdf&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-input-number</span> <span class="hljs-attr">:precision</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">controls-position</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">:step</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">:min</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">:max</span>=<span class="hljs-string">&quot;numPages&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;page&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input-number</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span> / &#123;&#123;numPages&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><br><br><span class="hljs-keyword">const</span> bitData = []<br>bitData.<span class="hljs-title function_">push</span>(res)<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">trueUrl</span> = <span class="hljs-string">`data:application/pdf;base64,<span class="hljs-subst">$&#123;res&#125;</span>`</span><br><span class="hljs-comment">// window.URL.createObjectURL(new Blob(bitData, &#123;type: &#x27;application/pdf&#x27;&#125;))</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">pdfUrl</span> = pdf.<span class="hljs-title function_">createLoadingTask</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">trueUrl</span>)<br></code></pre></td></tr></table></figure><p>具体参考vue-pdf</p><p>doc使用 docx-preview</p><p>主要注意blob转换，看后台给的情况调整</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>base64、blob等的相互转换</title>
    <link href="/2022/04/28/base642blob/"/>
    <url>/2022/04/28/base642blob/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">_base64ToArrayBuffer (dataurl, filename) &#123;<br>    <span class="hljs-keyword">let</span> arr = dataurl.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)<br>    <span class="hljs-keyword">let</span> mime = arr[<span class="hljs-number">0</span>].<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/:(.*?);/</span>)[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">let</span> bstr = <span class="hljs-title function_">atob</span>(arr[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">let</span> n = bstr.<span class="hljs-property">length</span><br>    <span class="hljs-keyword">let</span> u8arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(n)<br>    <span class="hljs-keyword">while</span> (n--) &#123;<br>    u8arr[n] = bstr.<span class="hljs-title function_">charCodeAt</span>(n)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>([u8arr], filename, &#123; <span class="hljs-attr">type</span>: mime &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">readFileInputEventAsArrayBuffer (event, callback) &#123;<br>    <span class="hljs-keyword">const</span> file = event.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">const</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>()<br>    reader.<span class="hljs-property">onload</span> = <span class="hljs-function">(<span class="hljs-params">loadEvent</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> arrayBuffer = loadEvent.<span class="hljs-property">target</span>[<span class="hljs-string">&#x27;result&#x27;</span>]<br>    <span class="hljs-title function_">callback</span>(arrayBuffer)<br>    &#125;<br>    reader.<span class="hljs-title function_">readAsArrayBuffer</span>(file)<br>&#125;,<br><span class="hljs-comment">// 这个是ArrayBuffer的使用，但是感觉还是有点问题</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> blobUrl (base64, fileType) &#123;<br>   <span class="hljs-keyword">let</span> arr = base64.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)<br>   <span class="hljs-comment">// 注意base64的最后面中括号和引号是不转译的</span><br>   <span class="hljs-keyword">let</span> _arr = arr[<span class="hljs-number">1</span>].<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, arr[<span class="hljs-number">1</span>].<span class="hljs-property">length</span> - <span class="hljs-number">2</span>)<br>   <span class="hljs-keyword">let</span> mime = arr[<span class="hljs-number">0</span>].<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/:(.*?);/</span>)[<span class="hljs-number">1</span>]<br>   <span class="hljs-keyword">let</span> bstr = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">atob</span>(_arr)<span class="hljs-comment">// base64解码</span><br>   <span class="hljs-keyword">let</span> n = bstr.<span class="hljs-property">length</span><br>   <span class="hljs-keyword">let</span> u8arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(n)<br><br>   <span class="hljs-keyword">while</span> (n--) &#123;<br>     u8arr[n] = bstr.<span class="hljs-title function_">charCodeAt</span>(n)<br>   &#125;<br><br>   <span class="hljs-keyword">let</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([u8arr], &#123;<br>     <span class="hljs-attr">type</span>: mime || fileType<br>   &#125;)<br><br>   <span class="hljs-comment">// let url = URL.createObjectURL(blob)</span><br><br>   <span class="hljs-keyword">return</span> blob<br> &#125;,<br><span class="hljs-comment">// blob 转成链接，或者返回blob，可以使用url作为视频播放链接，但是blob不能直接作为视频播放</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>get请求地址传参问题</title>
    <link href="/2022/03/09/qs/"/>
    <url>/2022/03/09/qs/</url>
    
    <content type="html"><![CDATA[<p>带有[]的内容会报400，<br>后端说是将其解析为数组，<br>tomcat的特性，高版本中，不允许url中有特殊字符。</p><blockquote><p>严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符</p></blockquote><p>解决方案：</p><ul><li><p>仍继续用高版本的tomcat，但是修改它的配置，让它不再去拦截有特殊符号的url</p></li><li><p>用低版本的tomcat</p></li><li><p>拼在url后面的参数，先用<code>encodeURI()</code>转义</p><p>后台要做处理，前端也可以引入qs  <code>import qs from &#39;qs&#39;</code> 是一个自带的js库，可以快速进行转换qs.stringify()</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>xlsx.js的简单使用</title>
    <link href="/2022/03/08/xlsxjs/"/>
    <url>/2022/03/08/xlsxjs/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> workbook = <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">book_new</span>()<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">        XXX| A | B | C | D | E | F | G |</span><br><span class="hljs-comment">        ---+---+---+---+---+---+---+---+</span><br><span class="hljs-comment">        1 | S | h | e | e | t | J | S |</span><br><span class="hljs-comment">        2 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |</span><br><span class="hljs-comment">        3 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        XLSX.utils.aoa_to_sheet获取JS值数组的数组，</span><br><span class="hljs-comment">        并且返回一个工作表寻找输入数据。</span><br><span class="hljs-comment">        Numbers，Booleans和Strings都被存储为相应的样式。</span><br><span class="hljs-comment">        Date被存储为date或者是numbers。跳过数组孔和显式“未定义”值。</span><br><span class="hljs-comment">        null值可能被剔除。所有其它值存储为字符串。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        生成实例表：</span><br><span class="hljs-comment">        var ws = XLSX.utils.aoa_to_sheet([</span><br><span class="hljs-comment">            &quot;SheetJS&quot;.split(&quot;&quot;),</span><br><span class="hljs-comment">            [1,2,3,4,5,6,7],</span><br><span class="hljs-comment">            [2,3,4,5,6,7,8]</span><br><span class="hljs-comment">        ]);</span><br><span class="hljs-comment">      */</span><br><span class="hljs-keyword">const</span> pushData = []<br><span class="hljs-comment">// pushData.push([`Data Range:$&#123;this.xslxFilename&#125;`])</span><br><span class="hljs-comment">// pushData.push([&#x27;#&#x27;, &#x27;Source&#x27;, &#x27;Target&#x27;, &#x27;Frequency&#x27;])</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">filteredViewItems</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (item.<span class="hljs-property">isSelected</span>) &#123;<br>    pushData.<span class="hljs-title function_">push</span>([item.<span class="hljs-property">srcTerm</span> || <span class="hljs-string">&#x27;&#x27;</span>, item.<span class="hljs-property">tgtTerm</span> || <span class="hljs-string">&#x27;&#x27;</span>, item.<span class="hljs-property">frequency</span>])<br>  &#125;<br>&#125;)<br><span class="hljs-keyword">let</span> wb = <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">aoa_to_sheet</span>(pushData)<br><span class="hljs-variable constant_">XLSX</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">book_append_sheet</span>(workbook, wb, <span class="hljs-string">&#x27;Sheet1&#x27;</span>)<br><span class="hljs-keyword">let</span> wbout = <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-title function_">write</span>(workbook, &#123;<br>  <span class="hljs-attr">bookType</span>: <span class="hljs-string">&#x27;xlsx&#x27;</span>,<br>  <span class="hljs-attr">bookSST</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;array&#x27;</span>,<br>&#125;)<br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-variable constant_">XLSX</span>.<span class="hljs-title function_">writeFile</span>(workbook, filename + <span class="hljs-string">&#x27;.xlsx&#x27;</span>)<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">console</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e, wbout)<br>&#125;<br><span class="hljs-keyword">return</span> wbout<br><br></code></pre></td></tr></table></figure><p>官方github：<a href="https://github.com/SheetJS/sheetjs">https://github.com/SheetJS/sheetjs</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pdd一面</title>
    <link href="/2022/03/06/pddmianshi/"/>
    <url>/2022/03/06/pddmianshi/</url>
    
    <content type="html"><![CDATA[<h4 id="回顾一下pdd一面"><a href="#回顾一下pdd一面" class="headerlink" title="回顾一下pdd一面"></a>回顾一下pdd一面</h4><span id="more"></span><p>1、开始是简单的自我介绍</p><p>2、接下来是问了一个布局居中问题，哪些方式</p><p>答：flex，margin的auto，line-height，text-align:center</p><p>下来查了一下还有使用表格的方法，vertical-align: middle；display: table-cell；绝对定位：使用浮动；font-size</p><p>3、简单的编程题，leetcode中的版本号问题，但是最后结果有两个是不对的，下来又重新优化了一下，使用遍历即可解决，回想一下使用白板不能进行快速调试console.log，定位问题没定位出来。</p><blockquote><p>给你两个版本号 version1 和 version2 ，请你比较它们。</p><p>版本号由一个或多个修订号组成，各修订号由一个 ‘.’ 连接。每个修订号由 多位数字 组成，可能包含 前导零 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，2.5.33 和 0.1 都是有效的版本号。</p><p>比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较 忽略任何前导零后的整数值 。也就是说，修订号 1 和修订号 001 相等 。如果版本号没有指定某个下标处的修订号，则该修订号视为 0 。例如，版本 1.0 小于版本 1.1 ，因为它们下标为 0 的修订号相同，而下标为 1 的修订号分别为 0 和 1 ，0 &lt; 1 。</p><p>返回规则如下：</p><p>如果 version1 &gt; version2 返回 1，<br>如果 version1 &lt; version2 返回 -1，<br>除此之外返回 0。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">version1</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">version2</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> compareVersion = <span class="hljs-keyword">function</span>(<span class="hljs-params">version1, version2</span>) &#123;<br>  <span class="hljs-keyword">const</span> v1 = version1.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)<br>  <span class="hljs-keyword">const</span> v2 = version2.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)<br>  <span class="hljs-keyword">const</span> maxNum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(v1.<span class="hljs-property">length</span>, v2.<span class="hljs-property">length</span>)<br>  <span class="hljs-keyword">let</span> arr = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; maxNum; i++) &#123;<br>    <span class="hljs-keyword">const</span> num = <span class="hljs-title class_">Number</span>(v1[i] ? v1[i] : <span class="hljs-number">0</span>) - <span class="hljs-title class_">Number</span>(v2[i] ? v2[i] : <span class="hljs-number">0</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)<br>    arr.<span class="hljs-title function_">push</span>(num)<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br>  <span class="hljs-keyword">let</span> returnNum = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> ii = <span class="hljs-number">0</span>; ii &lt; maxNum; ii++) &#123;<br>    <span class="hljs-keyword">if</span> (arr[ii] &gt; <span class="hljs-number">0</span>) &#123;<br>      returnNum = <span class="hljs-number">1</span><br>      <span class="hljs-keyword">break</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[ii] == <span class="hljs-number">0</span>) &#123;<br>      returnNum = <span class="hljs-number">0</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[ii] &lt; <span class="hljs-number">0</span>) &#123;<br>      returnNum = -<span class="hljs-number">1</span><br>      <span class="hljs-keyword">break</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> returnNum<br>&#125;;<br></code></pre></td></tr></table></figure><p>这是下来自己重新写的一个，当时有最后比较arr的时候，使用了层层嵌套的if，处理不好</p><p>官方解法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> compareVersion = <span class="hljs-keyword">function</span>(<span class="hljs-params">version1, version2</span>) &#123;<br>    <span class="hljs-keyword">const</span> v1 = version1.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>    <span class="hljs-keyword">const</span> v2 = version2.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; v1.<span class="hljs-property">length</span> || i &lt; v2.<span class="hljs-property">length</span>; ++i) &#123;<br>        <span class="hljs-keyword">let</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (i &lt; v1.<span class="hljs-property">length</span>) &#123;<br>            x = <span class="hljs-built_in">parseInt</span>(v1[i]);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i &lt; v2.<span class="hljs-property">length</span>) &#123;<br>            y = <span class="hljs-built_in">parseInt</span>(v2[i]);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x &gt; y) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x &lt; y) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法二：双指针处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> compareVersion = <span class="hljs-keyword">function</span>(<span class="hljs-params">version1, version2</span>) &#123;<br>    <span class="hljs-keyword">const</span> n = version1.<span class="hljs-property">length</span>, m = version2.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; n || j &lt; m) &#123;<br>        <span class="hljs-keyword">let</span> x = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (; i &lt; n &amp;&amp; version1[i] !== <span class="hljs-string">&#x27;.&#x27;</span>; ++i) &#123;<br>            x = x * <span class="hljs-number">10</span> + version1[i].<span class="hljs-title function_">charCodeAt</span>() - <span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_">charCodeAt</span>();<br>        &#125;<br>        ++i; <span class="hljs-comment">// 跳过点号</span><br>        <span class="hljs-keyword">let</span> y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (; j &lt; m &amp;&amp; version2.<span class="hljs-title function_">charAt</span>(j) !== <span class="hljs-string">&#x27;.&#x27;</span>; ++j) &#123;<br>            y = y * <span class="hljs-number">10</span> + version2[j].<span class="hljs-title function_">charCodeAt</span>() - <span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_">charCodeAt</span>();<br>        &#125;<br>        ++j; <span class="hljs-comment">// 跳过点号</span><br>        <span class="hljs-keyword">if</span> (x !== y) &#123;<br>            <span class="hljs-keyword">return</span> x &gt; y ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>4、接下来就是问了点简单地了一下项目，问到登录怎么做，怎么实现定位元素移动，旋转</p><p>5、最后问你还有什么想问的，就结束了今天的面试。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>document.domain</title>
    <link href="/2022/01/25/domin/"/>
    <url>/2022/01/25/domin/</url>
    
    <content type="html"><![CDATA[<p>谷歌将禁止修改docment.domain来解决跨域问题<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/domain#setter">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/domain#setter</a></p><p>比如网站XXX.HHHH.COM和SSS.HHHH.COM不能通讯，但是可以设置上述的属性为公共域，便可访问。</p><p>看到个解决方案为使用 <strong>Origin-Agent-Cluste</strong>这一属性</p><p>Origin-Agent-Cluste: ?0</p><p>允许页面请求被源（而不是站点）隔离。如果设置为 true ( <strong>Origin-Agent-Cluster: ?1</strong> )，则要求浏览器按来源隔离页面。如果为假，则按站点</p><p>或者使用postMessage()或Channel Messaging API()代替document.domain</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">主页面：<span class="hljs-attr">https</span>:<span class="hljs-comment">//a.hhhh.com</span><br><br><span class="hljs-comment">// 给 https://b.hhhh.com 发消息</span><br>iframe.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;哈喽&#x27;</span>, <span class="hljs-string">&#x27;https://b.hhhh.com&#x27;</span>);<br><br><span class="hljs-comment">// 接收信息</span><br>iframe.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 把不想要的信息过滤掉</span><br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">origin</span> !== <span class="hljs-string">&#x27;https://b.hhhh.com&#x27;</span>) <span class="hljs-keyword">return</span>;<br><br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">data</span> === <span class="hljs-string">&#x27;succeeded&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 干点别的 ...</span><br>  &#125;<br>&#125;);<br>iframe 页面：<span class="hljs-attr">https</span>:<span class="hljs-comment">//b.hhhh.com</span><br><br><span class="hljs-comment">// 接收信息</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 拒绝其他信息</span><br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">origin</span> !== <span class="hljs-string">&#x27;https://a.hhhh.com&#x27;</span>) <span class="hljs-keyword">return</span>;<br>  <br>  <span class="hljs-comment">// 恢复消息</span><br>  event.<span class="hljs-property">source</span>.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;succeeded&#x27;</span>, event.<span class="hljs-property">origin</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>处理用户输入html标签等</title>
    <link href="/2022/01/19/html%E6%A0%87%E7%AD%BE/"/>
    <url>/2022/01/19/html%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">a.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&#x27;&amp;amp;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">&#x27;&amp;lt;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&gt;/g</span>, <span class="hljs-string">&#x27;&amp;gt;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;&amp;quot;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&#x27;/g</span>, <span class="hljs-string">&#x27;&amp;apos;&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">formatSpace (s) &#123;<br>  <span class="hljs-keyword">return</span> (s || <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (i.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>) === <span class="hljs-number">160</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">32</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> i<br>  &#125;).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>&#125;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>截取特定字符之间的内容</title>
    <link href="/2021/12/23/%E6%88%AA%E5%8F%96%E4%B8%AD%E9%97%B4%E5%AD%97%E7%AC%A6/"/>
    <url>/2021/12/23/%E6%88%AA%E5%8F%96%E4%B8%AD%E9%97%B4%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;axxxb&#x27;</span><br><span class="hljs-keyword">const</span> str2 = str.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/a(\S*)b/</span>)[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;axxxb&#x27;</span><br><span class="hljs-keyword">const</span> str2 = str.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(\S*)b/</span>)[<span class="hljs-number">1</span>])<br><span class="hljs-comment">// 截取之前的内容</span><br></code></pre></td></tr></table></figure><p>类似的全局匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> temp = tgt.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/-(\S*)-/g</span>)<br><span class="hljs-keyword">const</span> temp2 = temp.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> i.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/-(\S*)-/</span>)[<span class="hljs-number">1</span>]<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(temp2)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>css三角，多行文本超出，滚动条相关</title>
    <link href="/2021/12/20/css%E6%A0%B7%E5%BC%8F%E7%AD%89/"/>
    <url>/2021/12/20/css%E6%A0%B7%E5%BC%8F%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<p>1、css三角形角标</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> solid transparent;<br>  <span class="hljs-attribute">border-top-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、css一行文本超出</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">overflow</span>: hidden;<br><span class="hljs-attribute">text-overflow</span>:ellipsis;<br><span class="hljs-attribute">white-space</span>: nowrap;<br></code></pre></td></tr></table></figure><p>3、多行文本超出显示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span>: -webkit-box;<br>-webkit-box-orient: vertical;<br>-webkit-line-clamp: <span class="hljs-number">3</span>;<br><span class="hljs-attribute">overflow</span>: hidden;<br></code></pre></td></tr></table></figure><p>4、修改滚动条样式</p><p>隐藏<code>div</code>元素的滚动条</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>::-webkit-scrollbar &#123;<br>    <span class="hljs-attribute">display</span>: none;<br>    <br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>div::-webkit-scrollbar 滚动条整体部分</p><p>div::-webkit-scrollbar-thumb 滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）</p><p>div::-webkit-scrollbar-track 滚动条的轨道</p><p>div::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。</p><p>div::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分</p><p>div::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处</p><p>div::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</p><p>注意此方案有兼容性问题，一般需要隐藏滚动条时我都是用一个色块通过定位盖上去，或者将子级元素调大，父级元素使用overflow-hidden截掉滚动条部分。</p><p>5、隐藏页面元素</p><p>display-none: 元素不会占用空间，在页面中不显示，子元素也不会显示。</p><p>opacity-0: 元素透明度将为<code>0</code>，但元素仍然存在，绑定的事件仍旧有效仍可触发执行。</p><p>visibility-hidden：元素隐藏，但元素仍旧存在，占用空间，页面中无法触发该元素的事件。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>有点东西的按钮</title>
    <link href="/2021/11/19/somAwasomeButoom/"/>
    <url>/2021/11/19/somAwasomeButoom/</url>
    
    <content type="html"><![CDATA[<html>    <body>        <div style="text-align: center;">            <button class="button1">hover me</button>        </div>        <div>        <div style="margin: 50px auto;text-align: center;">            <button class="button2">hover me</button>        </div>    </div></body><style>.button1, .button1::after {    padding: 16px 20px;    font-size: 18px;    background: linear-gradient(45deg, transparent 5%, #ff013c 5%);    border: 0;    color: #fff;    letter-spacing: 3px;    line-height: 1;    box-shadow: 6px 0px 0px #00e6f6;    outline: transparent;    position: relative;}.button1::after {    --slice-0: inset(50% 50% 50% 50%);    --slice-1: inset(80% -6px 0 0);    --slice-2: inset(50% -6px 30% 0);    --slice-3: inset(10% -6px 85% 0);    --slice-4: inset(40% -6px 43% 0);    --slice-5: inset(80% -6px 5% 0);    content:"HOVER ME";    display: block;    position: absolute;    top: 0;    left: 0;    right: 0;    bottom: 0;    background: linear-gradient(45deg, transparent 3%, #00e6f6 3%, #00e6f6 5%, #ff013c 5%);    text-shadow: -3px -3px 0px #f8f005, 3px 3px 0px #00e6f6;    clip-path: var(--slice-0);}.button1:hover::after {    animation: 1s glitch;    animation-timing-function: steps(2, end);}@keyframes glitch {    0% {        clip-path: var(--slice-1);        transform: translate(-20px, -10px);    }    10% {        clip-path: var(--slice-3);        transform: translate(10px, 10px);    }    20% {        clip-path: var(--slice-1);        transform: translate(-10px, 10px);    }    30% {        clip-path: var(--slice-3);        transform: translate(0px, 5px);    }    40% {        clip-path: var(--slice-2);        transform: translate(-5px, 0px);    }    50% {        clip-path: var(--slice-3);        transform: translate(5px, 0px);    }    60% {        clip-path: var(--slice-4);        transform: translate(5px, 10px);    }    70% {        clip-path: var(--slice-2);        transform: translate(-10px, 10px);    }    80% {        clip-path: var(--slice-5);        transform: translate(20px, -10px);    }    90% {        clip-path: var(--slice-1);        transform: translate(-10px, 0px);    }    100% {        clip-path: var(--slice-1);        transform: translate(0);    }}.button2 {    text-decoration: none;    position: relative;    border: none;    font-size: 14px;    font-family: inherit;    color: #fff;    width: 9em;    height: 3em;    line-height: 2em;    text-align: center;    background: linear-gradient(90deg, #03a9f4, #f441a5, #ffeb3b, #03a9f4);    background-size: 300%;    border-radius: 30px;    z-index: 1;}.button2:hover {    animation: ani 8s linear infinite;    border: none;}@keyframes ani {    0% {        background-position: 0%;    }    100% {        background-position: 400%;    }}.button2:before {    content:'';    position: absolute;    top: -5px;    left: -5px;    right: -5px;    bottom: -5px;    z-index: -1;    background: linear-gradient(90deg, #03a9f4, #f441a5, #ffeb3b, #03a9f4);    background-size: 400%;    border-radius: 35px;    transition: 1s;}.button2:hover::before {    filter: blur(20px);}.button2:active {    background: linear-gradient(32deg, #03a9f4, #f441a5, #ffeb3b, #03a9f4);}</style></html><p><img src="/2021/11/19/somAwasomeButoom/223.gif" alt="gif1"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">button</span>,<br><span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">16px</span> <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">45deg</span>, transparent <span class="hljs-number">5%</span>, <span class="hljs-number">#ff013c</span> <span class="hljs-number">5%</span>);<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">6px</span> <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">#00e6f6</span>;<br>  <span class="hljs-attribute">outline</span>: transparent;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attr">--slice-0</span>: <span class="hljs-built_in">inset</span>(<span class="hljs-number">50%</span> <span class="hljs-number">50%</span> <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>);<br>  <span class="hljs-attr">--slice-1</span>: <span class="hljs-built_in">inset</span>(<span class="hljs-number">80%</span> -<span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>);<br>  <span class="hljs-attr">--slice-2</span>: <span class="hljs-built_in">inset</span>(<span class="hljs-number">50%</span> -<span class="hljs-number">6px</span> <span class="hljs-number">30%</span> <span class="hljs-number">0</span>);<br>  <span class="hljs-attr">--slice-3</span>: <span class="hljs-built_in">inset</span>(<span class="hljs-number">10%</span> -<span class="hljs-number">6px</span> <span class="hljs-number">85%</span> <span class="hljs-number">0</span>);<br>  <span class="hljs-attr">--slice-4</span>: <span class="hljs-built_in">inset</span>(<span class="hljs-number">40%</span> -<span class="hljs-number">6px</span> <span class="hljs-number">43%</span> <span class="hljs-number">0</span>);<br>  <span class="hljs-attr">--slice-5</span>: <span class="hljs-built_in">inset</span>(<span class="hljs-number">80%</span> -<span class="hljs-number">6px</span> <span class="hljs-number">5%</span> <span class="hljs-number">0</span>);<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;HOVER ME&#x27;</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<br>    <span class="hljs-number">45deg</span>,<br>    transparent <span class="hljs-number">3%</span>,<br>    <span class="hljs-number">#00e6f6</span> <span class="hljs-number">3%</span>,<br>    <span class="hljs-number">#00e6f6</span> <span class="hljs-number">5%</span>,<br>    <span class="hljs-number">#ff013c</span> <span class="hljs-number">5%</span><br>  );<br>  <span class="hljs-attribute">text-shadow</span>: -<span class="hljs-number">3px</span> -<span class="hljs-number">3px</span> <span class="hljs-number">0px</span> <span class="hljs-number">#f8f005</span>, <span class="hljs-number">3px</span> <span class="hljs-number">3px</span> <span class="hljs-number">0px</span> <span class="hljs-number">#00e6f6</span>;<br>  <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">var</span>(--slice-<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">animation</span>: <span class="hljs-number">1s</span> glitch;<br>  <span class="hljs-attribute">animation-timing-function</span>: <span class="hljs-built_in">steps</span>(<span class="hljs-number">2</span>, end);<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> glitch &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">var</span>(--slice-<span class="hljs-number">1</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">20px</span>, -<span class="hljs-number">10px</span>);<br>  &#125;<br><br>  <span class="hljs-number">10%</span> &#123;<br>    <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">var</span>(--slice-<span class="hljs-number">3</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">10px</span>, <span class="hljs-number">10px</span>);<br>  &#125;<br><br>  <span class="hljs-number">20%</span> &#123;<br>    <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">var</span>(--slice-<span class="hljs-number">1</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">10px</span>, <span class="hljs-number">10px</span>);<br>  &#125;<br><br>  <span class="hljs-number">30%</span> &#123;<br>    <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">var</span>(--slice-<span class="hljs-number">3</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0px</span>, <span class="hljs-number">5px</span>);<br>  &#125;<br><br>  <span class="hljs-number">40%</span> &#123;<br>    <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">var</span>(--slice-<span class="hljs-number">2</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">5px</span>, <span class="hljs-number">0px</span>);<br>  &#125;<br><br>  <span class="hljs-number">50%</span> &#123;<br>    <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">var</span>(--slice-<span class="hljs-number">3</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">5px</span>, <span class="hljs-number">0px</span>);<br>  &#125;<br><br>  <span class="hljs-number">60%</span> &#123;<br>    <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">var</span>(--slice-<span class="hljs-number">4</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">5px</span>, <span class="hljs-number">10px</span>);<br>  &#125;<br><br>  <span class="hljs-number">70%</span> &#123;<br>    <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">var</span>(--slice-<span class="hljs-number">2</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">10px</span>, <span class="hljs-number">10px</span>);<br>  &#125;<br><br>  <span class="hljs-number">80%</span> &#123;<br>    <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">var</span>(--slice-<span class="hljs-number">5</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">20px</span>, -<span class="hljs-number">10px</span>);<br>  &#125;<br><br>  <span class="hljs-number">90%</span> &#123;<br>    <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">var</span>(--slice-<span class="hljs-number">1</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">10px</span>, <span class="hljs-number">0px</span>);<br>  &#125;<br><br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">var</span>(--slice-<span class="hljs-number">1</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/11/19/somAwasomeButoom/2232.gif" alt="gif2"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">font-family</span>: inherit;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">9em</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">3em</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">2em</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">90deg</span>, <span class="hljs-number">#03a9f4</span>, <span class="hljs-number">#f441a5</span>, <span class="hljs-number">#ffeb3b</span>, <span class="hljs-number">#03a9f4</span>);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">300%</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">animation</span>: ani <span class="hljs-number">8s</span> linear infinite;<br>  <span class="hljs-attribute">border</span>: none;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> ani &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0%</span>;<br>  &#125;<br><br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">400%</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: -<span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">left</span>: -<span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">right</span>: -<span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">90deg</span>, <span class="hljs-number">#03a9f4</span>, <span class="hljs-number">#f441a5</span>, <span class="hljs-number">#ffeb3b</span>, <span class="hljs-number">#03a9f4</span>);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">400%</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">35px</span>;<br>  <span class="hljs-attribute">transition</span>: <span class="hljs-number">1s</span>;<br>&#125;<br><br><span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">20px</span>);<br>&#125;<br><br><span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">32deg</span>, <span class="hljs-number">#03a9f4</span>, <span class="hljs-number">#f441a5</span>, <span class="hljs-number">#ffeb3b</span>, <span class="hljs-number">#03a9f4</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>最近发现的前端工具网站</title>
    <link href="/2021/11/19/awsomeHtml/"/>
    <url>/2021/11/19/awsomeHtml/</url>
    
    <content type="html"><![CDATA[<p> 帮你用简短的代码解决编程中的常见问题</p><p>可以帮助你创建 CSS 帧动画</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>console.log</title>
    <link href="/2021/11/03/console-log/"/>
    <url>/2021/11/03/console-log/</url>
    
    <content type="html"><![CDATA[<p>浏览器的控制台的 console.log 偶然间看到可以用来输出一些信息，百度等进入主页打开控制器都能看到，而且 console.log 支持 background，这就可以让控制台输出图片等信息了，唯一注意的是需要使用 ==网络图片== 或者 ==base64== 类型的图片。<br>由于 console 不支持 <code>&lt;img&gt;</code> 标签，因此用 背景图片 代替。<br>此外，console 不支持 width 和 height，利用 空格 和 font-size 代替；还可以使用 padding 和 line-height 代替宽高。</p><p>ASSII-Aar的使用<br><code>console.log(</code>%c${ascii}<code>,&#39;color:#e59de3&#39;)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">https://asciiart.club/<br><br>http://patorjk.com/software/taag/#p=display&amp;f=Graffiti&amp;t=Type%20Something%20<br><br>https://lunicode.com/<br><br>http://1lineart.kulaone.com/#/<br></code></pre></td></tr></table></figure><p>背景渐变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">http://www.standardista.com/cssgradients/<br><br>https://projects.verou.me/css3patterns/<br><br>https://bennettfeely.com/gradients/<br><br>http://www.standardista.com/CSS3gradients/flags.html<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器访问剪贴板权限</title>
    <link href="/2021/07/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/"/>
    <url>/2021/07/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取权限</span><br>      <span class="hljs-keyword">try</span> &#123;<br>        navigator.<span class="hljs-property">clipboard</span>.<span class="hljs-title function_">readText</span>()<br>          .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">text</span> =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">isPasetDisabled</span> = !text<br>          &#125;)<br>          .<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">isPasetDisabled</span> = <span class="hljs-literal">true</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;无粘贴权限&#x27;</span>)<br>          &#125;)<br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isPasetDisabled</span> = <span class="hljs-literal">true</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;需要升级浏览器或更换浏览器&#x27;</span>, e)<br>      &#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> pasteText () &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">isPasetDisabled</span>) &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// 读取剪切板内容</span><br>    <span class="hljs-keyword">let</span> text = <span class="hljs-keyword">await</span> navigator.<span class="hljs-property">clipboard</span>.<span class="hljs-title function_">readText</span>()<br>    <span class="hljs-keyword">if</span> (判断内容) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>       consoloe.<span class="hljs-title function_">log</span>(text)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js小技巧</title>
    <link href="/2021/07/19/js%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2021/07/19/js%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>1、求和，最小值合最大值</p><p>利用 <code>reduce</code> 方法快速找到基本的运算。</p><p><code>const array  = [5,4,7,8,9,2];</code></p><p>求和：</p><p><code>array.reduce((a,b) =&gt; a+b); // 输出35</code></p><p>最大值：</p><p><code>array.reduce((a,b) =&gt; a&gt;b?a:b); // 输出9</code></p><p>相反就是最小值</p><p>2、排序字符串，数字或对象等数组</p><p>字符串数组排序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> stringArr = [<span class="hljs-string">&quot;Joe&quot;</span>, <span class="hljs-string">&quot;kapill&quot;</span>, <span class="hljs-string">&quot;Steve&quot;</span>, <span class="hljs-string">&quot;Musk&quot;</span>]<br>stringArr.<span class="hljs-title function_">sort</span>();<br><span class="hljs-comment">// 输出 [&quot;Joe&quot;, &quot;Kapil&quot;, &quot;Musk&quot;, &quot;Steve&quot;]</span><br><br>stringArr.<span class="hljs-title function_">reverse</span>();<br><span class="hljs-comment">// 输出 [&quot;Steve&quot;, &quot;Musk&quot;, &quot;Kapil&quot;, &quot;Joe&quot;]</span><br></code></pre></td></tr></table></figure><p>数字数组排序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">40</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">25</span>, <span class="hljs-number">10</span>];<br>array.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>) =&gt;</span> a-b);<br><span class="hljs-comment">// 输出 [1, 5, 10, 25, 40, 100]</span><br><br>array.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>) =&gt;</span> b-a);<br><span class="hljs-comment">// 输出 [100, 40, 25, 10, 5, 1]</span><br></code></pre></td></tr></table></figure><p>对象数组排序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> objectArr = [ <br>    &#123; <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Lazslo&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Jamf&#x27;</span> &#125;, <br>    &#123; <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Pig&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Bodine&#x27;</span> &#125;, <br>    &#123; <span class="hljs-attr">first_name</span>: <span class="hljs-string">&#x27;Pirate&#x27;</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">&#x27;Prentice&#x27;</span> &#125; <br>];<br>objectArr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>) =&gt;</span> a.<span class="hljs-property">last_name</span>.<span class="hljs-title function_">localeCompare</span>(b.<span class="hljs-property">last_name</span>));<br><span class="hljs-comment">// 输出 </span><br><span class="hljs-comment">// (3) [&#123;…&#125;, &#123;…&#125;, &#123;…&#125;] </span><br><span class="hljs-comment">// 0: &#123;first_name: &quot;Pig&quot;, last_name: &quot;Bodine&quot;&#125; </span><br><span class="hljs-comment">// 1: &#123;first_name: &quot;Lazslo&quot;, last_name: &quot;Jamf&quot;&#125; </span><br><span class="hljs-comment">// 2: &#123;first_name: &quot;Pirate&quot;, last_name: &quot;Prentice&quot;&#125; </span><br><span class="hljs-comment">// length: 3</span><br></code></pre></td></tr></table></figure><p>3、从数组中过滤掉虚值</p><p>像 <code>0</code>、<code>undefined</code>、<code>null</code>、<code>false</code>、<code>&quot;&quot;</code>、<code>&#39;&#39;</code> 这样的假值可以通过下面的技巧轻易地过滤掉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-literal">false</span>];<br>array.<span class="hljs-title function_">filter</span>(<span class="hljs-title class_">Boolean</span>);<br><br><span class="hljs-comment">// 输出</span><br>(<span class="hljs-number">3</span>) [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br></code></pre></td></tr></table></figure><p>4、使用逻辑运算符处理需要条件判断的情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomething</span>(<span class="hljs-params">arg1</span>)&#123;<br>    arg1 = arg1 || <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">// 如果arg1没有值，则取默认值 10</span><br>&#125;<br><br><span class="hljs-keyword">let</span> foo = <span class="hljs-number">10</span>;<br>foo === <span class="hljs-number">10</span> &amp;&amp; <span class="hljs-title function_">doSomething</span>();<br><span class="hljs-comment">// 如果 foo 等于 10, 则执行 doSomething();</span><br><span class="hljs-comment">// 输出：10</span><br><br>foo === <span class="hljs-number">5</span> || <span class="hljs-title function_">doSomething</span>();<br><span class="hljs-comment">// is the same thing as if (foo != 5) then doSomething(); </span><br><span class="hljs-comment">// Output: 10</span><br></code></pre></td></tr></table></figure><p>5、去除重复值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>];<br>array.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item,idx,arr</span>) =&gt;</span> arr.<span class="hljs-title function_">indexOf</span>(item) === idx);<br><br><span class="hljs-comment">// or</span><br><br><span class="hljs-keyword">const</span> better = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(array)];<br><span class="hljs-comment">// Output: [5, 4, 7, 8, 9, 2];</span><br></code></pre></td></tr></table></figure><p>6、创建一个计数器对象或 Map</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> string = <span class="hljs-string">&#x27;kapilalipak&#x27;</span>;<br><br><span class="hljs-keyword">const</span> table = &#123;&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> char <span class="hljs-keyword">of</span> string) &#123;<br>    table[char] = table [char]+<span class="hljs-number">1</span> || <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">// 输出 &#123;k: 2, a: 3, p: 2, i: 2, l: 2&#125;</span><br></code></pre></td></tr></table></figure><p>or</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> countMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; string.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (countMap.<span class="hljs-title function_">has</span>(string[i])) &#123;<br>      countMap.<span class="hljs-title function_">set</span>(string[i], countMap.<span class="hljs-title function_">get</span>(string[i]) + <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      countMap.<span class="hljs-title function_">set</span>(string[i], <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br><span class="hljs-comment">// 输出</span><br><span class="hljs-title class_">Map</span>(<span class="hljs-number">5</span>) &#123;<span class="hljs-string">&quot;k&quot;</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-string">&quot;a&quot;</span> =&gt; <span class="hljs-number">3</span>, <span class="hljs-string">&quot;p&quot;</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-string">&quot;i&quot;</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-string">&quot;l&quot;</span> =&gt; <span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><p>7、三元运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fever</span>(<span class="hljs-params">temp</span>) &#123;<br>    <span class="hljs-keyword">return</span> temp &gt; <span class="hljs-number">97</span> ? <span class="hljs-string">&#x27;Visit Doctor!&#x27;</span><br>      : temp &lt; <span class="hljs-number">97</span> ? <span class="hljs-string">&#x27;Go Out and Play!!&#x27;</span><br>      : temp === <span class="hljs-number">97</span> ? <span class="hljs-string">&#x27;Take Some Rest!&#x27;</span>: <span class="hljs-string">&#x27;Go Out and Play!&#x27;</span>;;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-title class_">Fever</span>(<span class="hljs-number">97</span>): <span class="hljs-string">&quot;Take Some Rest!&quot;</span> <br><span class="hljs-title class_">Fever</span>(<span class="hljs-number">100</span>): <span class="hljs-string">&quot;Visit Doctor!&quot;</span><br></code></pre></td></tr></table></figure><p>可以连续使用三元运算符</p><p>8、合并两个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> user = &#123; <br> <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kapil Raghuwanshi&#x27;</span>, <br> <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;Male&#x27;</span> <br> &#125;;<br><span class="hljs-keyword">const</span> college = &#123; <br> <span class="hljs-attr">primary</span>: <span class="hljs-string">&#x27;Mani Primary School&#x27;</span>, <br> <span class="hljs-attr">secondary</span>: <span class="hljs-string">&#x27;Lass Secondary School&#x27;</span> <br> &#125;;<br><span class="hljs-keyword">const</span> skills = &#123; <br> <span class="hljs-attr">programming</span>: <span class="hljs-string">&#x27;Extreme&#x27;</span>, <br> <span class="hljs-attr">swimming</span>: <span class="hljs-string">&#x27;Average&#x27;</span>, <br> <span class="hljs-attr">sleeping</span>: <span class="hljs-string">&#x27;Pro&#x27;</span> <br> &#125;;<br><br><span class="hljs-keyword">const</span> summary = &#123;...user, ...college, ...skills&#125;;<br></code></pre></td></tr></table></figure><p>9、洗牌一个数组</p><p>利用内置的 <code>Math.random()</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>];<br>list.<span class="hljs-title function_">sort</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>;<br>&#125;);<br><span class="hljs-comment">// 输出</span><br>(<span class="hljs-number">9</span>) [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>]<br><span class="hljs-comment">// 输出</span><br>(<span class="hljs-number">9</span>) [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><p>10、将十进制转换为二进制或十六进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> num = <span class="hljs-number">10</span>;<br><br>num.<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>);<br><span class="hljs-comment">// 输出: &quot;1010&quot;</span><br>num.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>);<br><span class="hljs-comment">// 输出: &quot;a&quot;</span><br>num.<span class="hljs-title function_">toString</span>(<span class="hljs-number">8</span>);<br><span class="hljs-comment">// 输出: &quot;12&quot;</span><br></code></pre></td></tr></table></figure><p>11、使用解构交换两个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-number">8</span>;<br>[a,b] = [b,a]<br><br>[a,b]<br><span class="hljs-comment">// 输出</span><br>(<span class="hljs-number">2</span>) [<span class="hljs-number">8</span>, <span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>12、单行的回文数检查</p><p><code>function checkPalindrome(str) &#123;  return str == str.split(&#39;&#39;).reverse().join(&#39;&#39;);&#125;checkPalindrome(&#39;naman&#39;);// 输出: true</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>13种Vue修饰符</title>
    <link href="/2021/07/07/v-model/"/>
    <url>/2021/07/07/v-model/</url>
    
    <content type="html"><![CDATA[<ol><li><p>lazy</p><p><code>lazy</code>修饰符作用是，改变输入框的值时value不会改变，当光标离开输入框时，<code>v-model</code>绑定的值value才会改变</p><input type="text" v-model.lazy="value"></li><li><p>trim</p><p><code>trim</code>修饰符的作用类似于JavaScript中的<code>trim()</code>方法，作用是把<code>v-model</code>绑定的值的首尾空格给过滤掉。</p></li><li><p>number</p><p><code>number</code>修饰符的作用是将值转成数字，但是先输入字符串和先输入数字，是两种情况</p><input type="text" v-model.number="value"><p>先输入数字的话，只取前面数字部分</p><p>先输入字母的话，<code>number</code>修饰符无效</p></li><li><p>stop</p><p><code>stop</code>修饰符的作用是阻止冒泡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clickEvent(2)&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:300px;height:100px;background:red&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;clickEvent(1)&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>capture</p><p>事件默认是由里往外<code>冒泡</code>，<code>capture</code>修饰符的作用是反过来，由外网内<code>捕获</code></p></li><li><p>self</p><p><code>self</code>修饰符作用是，只有点击事件绑定的本身才会触发事件</p></li><li><p>once</p><p><code>once</code>修饰符的作用是，事件只执行一次</p></li><li><p>prevent</p><p><code>prevent</code>修饰符的作用是阻止默认事件（例如a标签的跳转）</p></li><li><p>native</p><p><code>native</code>修饰符是加在自定义组件的事件上，保证事件能执行</p></li><li><p>left，right，middle<br>这三个修饰符是鼠标的左中右按键触发的事件</p><p>&lt;button @click.middle=”clickEvent(1)”  @click.left=”clickEvent(2)”  @click.right=”clickEvent(3)”&gt;点我</p></li><li><p>passive<br>当我们在监听元素滚动事件的时候，会一直触发onscroll事件，在pc端是没啥问题的，但是在移动端，会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给onscroll事件整了一个.lazy修饰符</p></li><li><p>camel<br>不加camel viewBox会被识别成viewbox</p><p><code>&lt;svg :viewBox=&quot;viewBox&quot;&gt;&lt;/svg&gt;</code></p><p>加了canmel viewBox才会被识别成viewBox</p><p><code>&lt;svg :viewBox.camel=&quot;viewBox&quot;&gt;&lt;/svg&gt;</code></p></li><li><p>sync<br>当父组件传值进子组件，子组件想要改变这个值时，可以这么做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//父组件里</span><br>&lt;children :foo=<span class="hljs-string">&quot;bar&quot;</span> @<span class="hljs-attr">update</span>:foo=<span class="hljs-string">&quot;val =&gt; bar = val&quot;</span>&gt;&lt;/children&gt;<br><br><span class="hljs-comment">//子组件里</span><br><span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;update:foo&#x27;</span>, newValue)<br><br><span class="hljs-comment">//sync修饰符的作用就是，可以简写：</span><br><br><span class="hljs-comment">//父组件里</span><br>&lt;children :foo.<span class="hljs-property">sync</span>=<span class="hljs-string">&quot;bar&quot;</span>&gt;&lt;/children&gt;<br><br><span class="hljs-comment">//子组件里</span><br><span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;update:foo&#x27;</span>, newValue)<br></code></pre></td></tr></table></figure></li><li><p>keyCode<br>当我们这么写事件的时候，无论按什么按钮都会触发事件<br><code>&lt;input type=&quot;text&quot; @keyup=&quot;shout(4)&quot;&gt;</code><br>那么想要限制成某个按键触发怎么办？这时候keyCode修饰符就派上用场了<br><code>&lt;input type=&quot;text&quot; @keyup.keyCode=&quot;shout(4)&quot;&gt;</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Vue提供的keyCode：<br><span class="hljs-comment">//普通键</span><br><span class="hljs-selector-class">.enter</span> <br><span class="hljs-selector-class">.tab</span><br><span class="hljs-selector-class">.delete</span> <span class="hljs-comment">//(捕获“删除”和“退格”键)</span><br><span class="hljs-selector-class">.space</span><br><span class="hljs-selector-class">.esc</span><br><span class="hljs-selector-class">.up</span><br><span class="hljs-selector-class">.down</span><br><span class="hljs-selector-class">.left</span><br><span class="hljs-selector-class">.right</span><br><span class="hljs-comment">//系统修饰键</span><br><span class="hljs-selector-class">.ctrl</span><br><span class="hljs-selector-class">.alt</span><br><span class="hljs-selector-class">.meta</span><br><span class="hljs-selector-class">.shift</span><br><br>按 ctrl 才会触发<br>&lt;<span class="hljs-selector-tag">input</span> type=<span class="hljs-string">&quot;text&quot;</span> @keyup.ctrl=<span class="hljs-string">&quot;shout(4)&quot;</span>&gt;<br><br>也可以鼠标事件+按键<br>&lt;<span class="hljs-selector-tag">input</span> type=<span class="hljs-string">&quot;text&quot;</span> @mousedown<span class="hljs-selector-class">.ctrl</span>.=<span class="hljs-string">&quot;shout(4)&quot;</span>&gt;<br><br>可以多按键触发 例如 ctrl + <span class="hljs-number">67</span><br>&lt;<span class="hljs-selector-tag">input</span> type=<span class="hljs-string">&quot;text&quot;</span> @keyup<span class="hljs-selector-class">.ctrl</span>.<span class="hljs-number">67</span>=<span class="hljs-string">&quot;shout(4)&quot;</span>&gt;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript动画库</title>
    <link href="/2021/06/18/%E5%8A%A8%E6%80%81%E7%89%B9%E6%95%88/"/>
    <url>/2021/06/18/%E5%8A%A8%E6%80%81%E7%89%B9%E6%95%88/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://mojs.github.io/">Mo.js</a>是一个优秀的库，可以为你的网站添加基于JavaScript的动态图形。</li></ul><span id="more"></span><ul><li><a href="https://github.com/juliangarnier/anime">Anime</a>该库可用于为CSS属性、SVG和DOM属性制作动画。</li><li><a href="https://popmotion.io/">Popmotion</a>是另一个轻量级和流行的动画库。</li><li>当你想在元素滚入或滚出视口时为其制作动画时，<a href="https://scrollrevealjs.org/">ScrollReveal库</a>就很方便。</li><li><a href="https://maxwellito.github.io/vivus/">Vivus</a>专门为SVG制作动画。</li><li>从<a href="https://github.com/mattboldt/typed.js">Typed.js</a>这个名字你可以猜到，这个动画库是用来输入文字的。你可以把你想输入的所有字符串作为一个数组来传递。这个库还实现了一个对SEO更友好的方法，你想用打字做动画的文本可以从网页上的一个HTML<code>div</code> 读取。</li><li><a href="https://kimmobrunfeldt.github.io/progressbar.js/">ProgressBar.js</a>添加进度条。内置的形状如直线、圆或半圆。</li><li><a href="http://airbnb.io/lottie/#/">AirBnB的Lottie</a>已经用Bodymovin导出为JSON。可以直接在你的网页上渲染这些效果。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>三种前端实现VR全景看房的方案</title>
    <link href="/2021/06/15/ar%E5%B1%95%E7%A4%BA/"/>
    <url>/2021/06/15/ar%E5%B1%95%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<p>三种前端实现VR全景看房的方案</p><p><a href="https://juejin.cn/post/6973865268426571784">https://juejin.cn/post/6973865268426571784</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Naive UI和icon库</title>
    <link href="/2021/06/15/icon%E5%BA%93/"/>
    <url>/2021/06/15/icon%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>最近发现一个组件库叫naiveui，发现组件还挺丰富的，官网地址：<a href="https://www.naiveui.com/zh-CN/os-theme">https://www.naiveui.com/zh-CN/light</a></p><p>icon组件库 xicons <a href="https://www.xicons.org/#/">www.xicons.org/#/</a></p><p><strong>Unicon</strong>是一种大胆的、新的方式来设计你的网站。有4500多个图标可供选择，这个库包括社交图标、股票、产品网站的图标，以及更多！。<a href="https://iconscout.com/unicons">来源</a></p><p><strong>Boxicons</strong>是一个免费的矢量图标集，适用于设计UI、品牌、营销、标志和网络。<a href="https://boxicons.com/">来源</a></p><p><strong>Glyphs</strong>图标，你就可以接触到成千上万的图标，而且它们都是完全可编辑的。<a href="https://glyphs.fyi/">来源</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>el-select大数据量渲染慢导致页面卡顿的问题</title>
    <link href="/2021/06/11/data%E8%BF%87%E5%A4%9A/"/>
    <url>/2021/06/11/data%E8%BF%87%E5%A4%9A/</url>
    
    <content type="html"><![CDATA[<p>一次性渲染大量数据问题</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;choose&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;small&quot;</span> <span class="hljs-attr">v-el-select-loadmore:rangeNumber</span>=<span class="hljs-string">&quot;loadMore(rangeNumber)&quot;</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">             <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list.slice(0, rangeNumber)&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">             <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">             <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.label&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">             <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.value&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br> <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-string">&#x27;el-select-loadmore&#x27;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">bind</span>(<span class="hljs-params">el, binding</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">let</span> self = <span class="hljs-variable language_">this</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 获取element-ui定义好的scroll盒子</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SELECTWRAP_DOM</span> = el.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.el-select-dropdown .el-select-dropdown__wrap&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable constant_">SELECTWRAP_DOM</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">/**</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">                * scrollHeight 获取元素内容高度(只读)</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">                * scrollTop 获取或者设置元素的偏移值,常用于, 计算滚动条的位置, 当一个元素的容器没有产生垂直方向的滚动条, 那它的scrollTop的值默认为0.</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">                * clientHeight 读取元素的可见高度(只读)</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">                * 如果元素滚动到底, 下面等式返回true, 没有则返回false:</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">                * ele.scrollHeight - ele.scrollTop === ele.clientHeight;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">                */</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">const</span> condition = <span class="hljs-variable language_">this</span>.<span class="hljs-property">scrollHeight</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">scrollTop</span> &lt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientHeight</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">if</span> (condition) binding.<span class="hljs-title function_">value</span>()</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">list</span>: [],</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">choose</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">rangeNumber</span>: <span class="hljs-number">10</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getList</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">getList</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                   <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;menu&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                   <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;menu&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;<span class="hljs-comment">//测试数据10万条数据, 这里数据多少条无所谓,list.slice(0, rangeNumber)方法只会默认加载初始的10条数据</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">loadMore</span>(<span class="hljs-params">n</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//n是默认初始展示的条数会在渲染的时候就可以获取,具体可以打log查看</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//if(n &lt; 8) this.rangeNumber = 10 //elementui下拉超过7条才会出滚动条,如果初始不出滚动条无法触发loadMore方法</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">rangeNumber</span> += <span class="hljs-number">5</span> <span class="hljs-comment">//每次滚动到底部可以新增条数  可自定义</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端性能优化</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>js如何少写if else</title>
    <link href="/2021/06/11/js%E4%BC%98%E9%9B%85%E5%88%A4%E6%96%AD/"/>
    <url>/2021/06/11/js%E4%BC%98%E9%9B%85%E5%88%A4%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 按钮点击事件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; status 活动状态：1 开团进行中 2 开团失败 3 商品售罄 4 开团成功 5 系统取消</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onButtonClick</span> = (<span class="hljs-params">status</span>)=&gt;&#123;<br>    <span class="hljs-keyword">if</span>(status == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-title function_">sendLog</span>(<span class="hljs-string">&#x27;processing&#x27;</span>)<br>        <span class="hljs-title function_">jumpTo</span>(<span class="hljs-string">&#x27;IndexPage&#x27;</span>)<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(status == <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-title function_">sendLog</span>(<span class="hljs-string">&#x27;fail&#x27;</span>)<br>        <span class="hljs-title function_">jumpTo</span>(<span class="hljs-string">&#x27;FailPage&#x27;</span>)<br>    &#125;<br></code></pre></td></tr></table></figure><p>改为switch的模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 按钮点击事件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; status 活动状态：1 开团进行中 2 开团失败 3 商品售罄 4 开团成功 5 系统取消</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onButtonClick</span> = (<span class="hljs-params">status</span>)=&gt;&#123;<br>    <span class="hljs-keyword">switch</span> (status)&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-title function_">sendLog</span>(<span class="hljs-string">&#x27;processing&#x27;</span>)<br>            <span class="hljs-title function_">jumpTo</span>(<span class="hljs-string">&#x27;IndexPage&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-title function_">sendLog</span>(<span class="hljs-string">&#x27;fail&#x27;</span>)<br>            <span class="hljs-title function_">jumpTo</span>(<span class="hljs-string">&#x27;FailPage&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-title function_">sendLog</span>(<span class="hljs-string">&#x27;other&#x27;</span>)<br>            <span class="hljs-title function_">jumpTo</span>(<span class="hljs-string">&#x27;Index&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>case 2和case 3逻辑一样的时候，可以省去执行语句和break，则case 2的情况自动执行case 3的逻辑。</p><p>再次简化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> actions = &#123;<br>    <span class="hljs-string">&#x27;1&#x27;</span>: [<span class="hljs-string">&#x27;processing&#x27;</span>,<span class="hljs-string">&#x27;IndexPage&#x27;</span>],<br>    <span class="hljs-string">&#x27;2&#x27;</span>: [<span class="hljs-string">&#x27;fail&#x27;</span>,<span class="hljs-string">&#x27;FailPage&#x27;</span>],<br>    <span class="hljs-string">&#x27;3&#x27;</span>: [<span class="hljs-string">&#x27;fail&#x27;</span>,<span class="hljs-string">&#x27;FailPage&#x27;</span>],<br>    <span class="hljs-string">&#x27;4&#x27;</span>: [<span class="hljs-string">&#x27;success&#x27;</span>,<span class="hljs-string">&#x27;SuccessPage&#x27;</span>],<br>    <span class="hljs-string">&#x27;5&#x27;</span>: [<span class="hljs-string">&#x27;cancel&#x27;</span>,<span class="hljs-string">&#x27;CancelPage&#x27;</span>],<br>    <span class="hljs-string">&#x27;default&#x27;</span>: [<span class="hljs-string">&#x27;other&#x27;</span>,<span class="hljs-string">&#x27;Index&#x27;</span>],<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 按钮点击事件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; status 活动状态：1开团进行中 2开团失败 3 商品售罄 4 开团成功 5 系统取消</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onButtonClick</span> = (<span class="hljs-params">status</span>)=&gt;&#123;<br>    <span class="hljs-keyword">let</span> action = actions[status] || actions[<span class="hljs-string">&#x27;default&#x27;</span>],<br>        logName = action[<span class="hljs-number">0</span>],<br>        pageName = action[<span class="hljs-number">1</span>]<br>    <span class="hljs-title function_">sendLog</span>(logName)<br>    <span class="hljs-title function_">jumpTo</span>(pageName)<br>&#125;<br></code></pre></td></tr></table></figure><p>再次优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> actions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>    [<span class="hljs-number">1</span>, [<span class="hljs-string">&#x27;processing&#x27;</span>,<span class="hljs-string">&#x27;IndexPage&#x27;</span>]],<br>    [<span class="hljs-number">2</span>, [<span class="hljs-string">&#x27;fail&#x27;</span>,<span class="hljs-string">&#x27;FailPage&#x27;</span>]],<br>    [<span class="hljs-number">3</span>, [<span class="hljs-string">&#x27;fail&#x27;</span>,<span class="hljs-string">&#x27;FailPage&#x27;</span>]],<br>    [<span class="hljs-number">4</span>, [<span class="hljs-string">&#x27;success&#x27;</span>,<span class="hljs-string">&#x27;SuccessPage&#x27;</span>]],<br>    [<span class="hljs-number">5</span>, [<span class="hljs-string">&#x27;cancel&#x27;</span>,<span class="hljs-string">&#x27;CancelPage&#x27;</span>]],<br>    [<span class="hljs-string">&#x27;default&#x27;</span>, [<span class="hljs-string">&#x27;other&#x27;</span>,<span class="hljs-string">&#x27;Index&#x27;</span>]]<br>])<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 按钮点击事件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; status 活动状态：1 开团进行中 2 开团失败 3 商品售罄 4 开团成功 5 系统取消</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onButtonClick</span> = (<span class="hljs-params">status</span>)=&gt;&#123;<br>    <span class="hljs-keyword">let</span> action = actions.<span class="hljs-title function_">get</span>(status) || actions.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;default&#x27;</span>)<br>    <span class="hljs-title function_">sendLog</span>(action[<span class="hljs-number">0</span>])<br>    <span class="hljs-title function_">jumpTo</span>(action[<span class="hljs-number">1</span>])<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Map对象和Object对象有什么区别呢？</p><ol><li>一个对象通常都有自己的原型，所以一个对象总有一个”prototype”键。</li><li>一个对象的键只能是字符串或者Symbols，但一个Map的键可以是任意值。</li><li>你可以通过size属性很容易地得到一个Map的键值对个数，而对象的键值对个数只能手动确认。</li></ol><p>这个时候如果有二元判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>（<span class="hljs-number">1</span>）&#123;<br>    <span class="hljs-keyword">if</span>（<span class="hljs-number">1</span>）&#123;<br>        <span class="hljs-comment">//do sth</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以这么做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> actions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>    [<span class="hljs-string">&#x27;guest_1&#x27;</span>, <span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/*do sth*/</span>&#125;],<br>    [<span class="hljs-string">&#x27;guest_2&#x27;</span>, <span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/*do sth*/</span>&#125;],<br>    [<span class="hljs-string">&#x27;guest_3&#x27;</span>, <span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/*do sth*/</span>&#125;],<br>    [<span class="hljs-string">&#x27;guest_4&#x27;</span>, <span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/*do sth*/</span>&#125;],<br>    [<span class="hljs-string">&#x27;guest_5&#x27;</span>, <span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/*do sth*/</span>&#125;],<br>    [<span class="hljs-string">&#x27;master_1&#x27;</span>, <span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/*do sth*/</span>&#125;],<br>    [<span class="hljs-string">&#x27;master_2&#x27;</span>, <span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/*do sth*/</span>&#125;],<br>    [<span class="hljs-string">&#x27;master_3&#x27;</span>, <span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/*do sth*/</span>&#125;],<br>    [<span class="hljs-string">&#x27;master_4&#x27;</span>, <span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/*do sth*/</span>&#125;],<br>    [<span class="hljs-string">&#x27;master_5&#x27;</span>, <span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/*do sth*/</span>&#125;],<br>    [<span class="hljs-string">&#x27;default&#x27;</span>, <span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/*do sth*/</span>&#125;],<br>])<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 按钮点击事件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; identity 身份标识：guest客态 master主态</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; status 活动状态：1 开团进行中 2 开团失败 3 开团成功 4 商品售罄 5 有库存未开团</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onButtonClick</span> = (<span class="hljs-params">identity,status</span>)=&gt;&#123;<br>    <span class="hljs-keyword">let</span> action = actions.<span class="hljs-title function_">get</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;identity&#125;</span>_<span class="hljs-subst">$&#123;status&#125;</span>`</span>) || actions.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;default&#x27;</span>)<br>    action.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>用Object对象来实现也是类似的，Map可以用任何类型的数据作为key。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> actions = &#123;<br>  <span class="hljs-string">&#x27;guest_1&#x27;</span>:<span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/*do sth*/</span>&#125;,<br>  <span class="hljs-string">&#x27;guest_2&#x27;</span>:<span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/*do sth*/</span>&#125;,<br>  <span class="hljs-comment">//....</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onButtonClick</span> = (<span class="hljs-params">identity,status</span>)=&gt;&#123;<br>  <span class="hljs-keyword">let</span> action = actions[<span class="hljs-string">`<span class="hljs-subst">$&#123;identity&#125;</span>_<span class="hljs-subst">$&#123;status&#125;</span>`</span>] || actions[<span class="hljs-string">&#x27;default&#x27;</span>]<br>  action.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>假如guest情况下，status1-4的处理逻辑都一样怎么办</p><p>最差的情况是这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> actions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>  [&#123;<span class="hljs-attr">identity</span>:<span class="hljs-string">&#x27;guest&#x27;</span>,<span class="hljs-attr">status</span>:<span class="hljs-number">1</span>&#125;,<span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/* functionA */</span>&#125;],<br>  [&#123;<span class="hljs-attr">identity</span>:<span class="hljs-string">&#x27;guest&#x27;</span>,<span class="hljs-attr">status</span>:<span class="hljs-number">2</span>&#125;,<span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/* functionA */</span>&#125;],<br>  [&#123;<span class="hljs-attr">identity</span>:<span class="hljs-string">&#x27;guest&#x27;</span>,<span class="hljs-attr">status</span>:<span class="hljs-number">3</span>&#125;,<span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/* functionA */</span>&#125;],<br>  [&#123;<span class="hljs-attr">identity</span>:<span class="hljs-string">&#x27;guest&#x27;</span>,<span class="hljs-attr">status</span>:<span class="hljs-number">4</span>&#125;,<span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/* functionA */</span>&#125;],<br>  [&#123;<span class="hljs-attr">identity</span>:<span class="hljs-string">&#x27;guest&#x27;</span>,<span class="hljs-attr">status</span>:<span class="hljs-number">5</span>&#125;,<span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">/* functionB */</span>&#125;],<br>  <span class="hljs-comment">//...</span><br>])<br></code></pre></td></tr></table></figure><p>好一点的写法是将处理逻辑函数进行缓存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">actions</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">functionA</span> = (<span class="hljs-params"></span>)=&gt;&#123;<span class="hljs-comment">/*do sth*/</span>&#125;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">functionB</span> = (<span class="hljs-params"></span>)=&gt;&#123;<span class="hljs-comment">/*do sth*/</span>&#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>    [&#123;<span class="hljs-attr">identity</span>:<span class="hljs-string">&#x27;guest&#x27;</span>,<span class="hljs-attr">status</span>:<span class="hljs-number">1</span>&#125;,functionA],<br>    [&#123;<span class="hljs-attr">identity</span>:<span class="hljs-string">&#x27;guest&#x27;</span>,<span class="hljs-attr">status</span>:<span class="hljs-number">2</span>&#125;,functionA],<br>    [&#123;<span class="hljs-attr">identity</span>:<span class="hljs-string">&#x27;guest&#x27;</span>,<span class="hljs-attr">status</span>:<span class="hljs-number">3</span>&#125;,functionA],<br>    [&#123;<span class="hljs-attr">identity</span>:<span class="hljs-string">&#x27;guest&#x27;</span>,<span class="hljs-attr">status</span>:<span class="hljs-number">4</span>&#125;,functionA],<br>    [&#123;<span class="hljs-attr">identity</span>:<span class="hljs-string">&#x27;guest&#x27;</span>,<span class="hljs-attr">status</span>:<span class="hljs-number">5</span>&#125;,functionB],<br>    <span class="hljs-comment">//...</span><br>  ])<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onButtonClick</span> = (<span class="hljs-params">identity,status</span>)=&gt;&#123;<br>  <span class="hljs-keyword">let</span> action = [...<span class="hljs-title function_">actions</span>()].<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">[key,value]</span>)=&gt;</span>(key.<span class="hljs-property">identity</span> == identity &amp;&amp; key.<span class="hljs-property">status</span> == status))<br>  action.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[key,value]</span>)=&gt;</span>value.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">actions</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">functionA</span> = (<span class="hljs-params"></span>)=&gt;&#123;<span class="hljs-comment">/*do sth*/</span>&#125;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">functionB</span> = (<span class="hljs-params"></span>)=&gt;&#123;<span class="hljs-comment">/*do sth*/</span>&#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>    [<span class="hljs-regexp">/^guest_[1-4]$/</span>,functionA],<br>    [<span class="hljs-regexp">/^guest_5$/</span>,functionB],<br>    <span class="hljs-comment">//...</span><br>  ])<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onButtonClick</span> = (<span class="hljs-params">identity,status</span>)=&gt;&#123;<br>  <span class="hljs-keyword">let</span> action = [...<span class="hljs-title function_">actions</span>()].<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">[key,value]</span>)=&gt;</span>(key.<span class="hljs-title function_">test</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;identity&#125;</span>_<span class="hljs-subst">$&#123;status&#125;</span>`</span>)))<br>  action.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[key,value]</span>)=&gt;</span>value.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>假如需求变成，凡是guest情况都要发送一个日志埋点，不同status情况也需要单独的逻辑处理，那我们可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">actions</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">functionA</span> = (<span class="hljs-params"></span>)=&gt;&#123;<span class="hljs-comment">/*do sth*/</span>&#125;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">functionB</span> = (<span class="hljs-params"></span>)=&gt;&#123;<span class="hljs-comment">/*do sth*/</span>&#125;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">functionC</span> = (<span class="hljs-params"></span>)=&gt;&#123;<span class="hljs-comment">/*send log*/</span>&#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>    [<span class="hljs-regexp">/^guest_[1-4]$/</span>,functionA],<br>    [<span class="hljs-regexp">/^guest_5$/</span>,functionB],<br>    [<span class="hljs-regexp">/^guest_.*$/</span>,functionC],<br>    <span class="hljs-comment">//...</span><br>  ])<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onButtonClick</span> = (<span class="hljs-params">identity,status</span>)=&gt;&#123;<br>  <span class="hljs-keyword">let</span> action = [...<span class="hljs-title function_">actions</span>()].<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">[key,value]</span>)=&gt;</span>(key.<span class="hljs-title function_">test</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;identity&#125;</span>_<span class="hljs-subst">$&#123;status&#125;</span>`</span>)))<br>  action.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[key,value]</span>)=&gt;</span>value.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>总结</p><p>8种逻辑判断写法，包括：</p><ol><li><p>if/else</p></li><li><p>switch</p></li><li><p>一元判断时：存到Object里</p></li><li><p>一元判断时：存到Map里</p></li><li><p>多元判断时：将condition拼接成字符串存到Object里</p></li><li><p>多元判断时：将condition拼接成字符串存到Map里</p></li><li><p>多元判断时：将condition存为Object存到Map里</p></li><li><p>多元判断时：将condition写作正则存到Map里</p></li></ol><p>原文：<a href="https://juejin.cn/post/6844903705058213896">https://juejin.cn/post/6844903705058213896</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue-ifranme局部打印插件</title>
    <link href="/2021/06/09/vue%E5%B0%8F%E6%8F%92%E4%BB%B6/"/>
    <url>/2021/06/09/vue%E5%B0%8F%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>vue-iframe-print</p><p>基于 iframe 打印的小工具</p><span id="more"></span><p><a href="https://github.com/alexwjj/vue-iframe-print">https://github.com/alexwjj/vue-iframe-print</a></p><p><a href="https://github.com/1014156094/vue-cert-poster">vue-cert-poster</a></p><p>稍加修改即可自用，主要使用的是html2canvas，如何解决用户缩放浏览器的问题，这里是转换成base64图片，最后下载输出，可以防止html2canvas制作的时候比例不对的问题。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>10分钟实现微信 &quot;炸屎&quot;大作战</title>
    <link href="/2021/06/04/ShitBomb/"/>
    <url>/2021/06/04/ShitBomb/</url>
    
    <content type="html"><![CDATA[<p>具体链接：<a href="https://juejin.cn/post/6969401491853410312">https://juejin.cn/post/6969401491853410312</a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1.<strong>丢炸弹</strong></p><p>轨迹路径（类似 y = x2x^2x2 ），然后通过<code>tween.js</code>来做补间动画。</p><span id="more"></span><p>2.<strong>炸弹爆炸</strong></p><p>利用<code>lottie</code> 来实现动画。</p><p>3.<strong>粑粑被炸开</strong></p><p>利用 <code>css</code> 动画实现</p><p>4.<strong>所有人震动</strong></p><p>利用 <code>css</code> 动画实现</p><hr><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="1-丢炸弹"><a href="#1-丢炸弹" class="headerlink" title="1.丢炸弹"></a>1.丢炸弹</h3><p>现在假设我们的炸弹是一个 10px * 10px 的小方块，设置起始点为（300，300）终点为 （0，100） H=100，此时我们得到的二次函数为：<br>$$<br>y=(1/120)x^2-(11/6)x+100<br>$$</p><p>而渲染每一帧动画，我们则用了著名的补间动画库<a href="http://tweenjs.github.io/tween.js">Tween.js</a> 补间(动画)是一个概念，允许你以平滑的方式更改对象的属性。你只需告诉它哪些属性要更改，当补间结束运行时它们应该具有哪些最终值，以及这需要多长时间，补间引擎将负责计算从起始点到结束点的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> coords = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">300</span> &#125;;  <span class="hljs-comment">// 起始点 为 x = 300</span><br><span class="hljs-keyword">var</span> tween = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">TWEEN</span>.<span class="hljs-title class_">Tween</span>(coords)<br> .<span class="hljs-title function_">to</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>  &#125;, <span class="hljs-number">1000</span>) <span class="hljs-comment">// 终点为 x = 0, 并且这个动作将在1秒内完成</span><br>  .<span class="hljs-title function_">easing</span>(<span class="hljs-variable constant_">TWEEN</span>.<span class="hljs-property">Easing</span>.<span class="hljs-property">Linear</span>.<span class="hljs-property">None</span>) <span class="hljs-comment">// 匀速</span><br><br></code></pre></td></tr></table></figure><p>完整demo   <a href="https://shiyanmaia.github.io/demo">效果链接</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>cdn-animation<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/tween.js/16.7.0/Tween.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">            box.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;width&#x27;</span>, <span class="hljs-string">&#x27;20px&#x27;</span>);</span><br><span class="language-javascript">            box.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;height&#x27;</span>, <span class="hljs-string">&#x27;20px&#x27;</span>);</span><br><span class="language-javascript">            box.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;background-position&#x27;</span>, <span class="hljs-string">&#x27;center&#x27;</span>);</span><br><span class="language-javascript">            box.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;background-size&#x27;</span>, <span class="hljs-string">&#x27;100%&#x27;</span>);</span><br><span class="language-javascript">            box.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;background-image&#x27;</span>, <span class="hljs-string">&#x27;url(./bomb.png)&#x27;</span>);</span><br><span class="language-javascript">            box.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;transform&#x27;</span>, <span class="hljs-string">&#x27;translate(&#x27;</span> + <span class="hljs-number">300</span> + <span class="hljs-string">&#x27;px, &#x27;</span> + <span class="hljs-number">300</span> + <span class="hljs-string">&#x27;px)&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(box);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">time</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">requestAnimationFrame</span>(animate);</span><br><span class="language-javascript">                <span class="hljs-variable constant_">TWEEN</span>.<span class="hljs-title function_">update</span>(time);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-title function_">requestAnimationFrame</span>(animate);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> H = <span class="hljs-number">100</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> coords = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">300</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> tween = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">TWEEN</span>.<span class="hljs-title class_">Tween</span>(coords)</span><br><span class="language-javascript">            .<span class="hljs-title function_">to</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">360</span> &#125;, <span class="hljs-number">1000</span>)</span><br><span class="language-javascript">            .<span class="hljs-title function_">easing</span>(<span class="hljs-variable constant_">TWEEN</span>.<span class="hljs-property">Easing</span>.<span class="hljs-property">Linear</span>.<span class="hljs-property">None</span>)</span><br><span class="language-javascript">            .<span class="hljs-title function_">onUpdate</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> c = H;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> a = <span class="hljs-number">5</span> / (<span class="hljs-number">6</span> * H);</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> b = -<span class="hljs-number">11</span> / <span class="hljs-number">6</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> x = coords.<span class="hljs-property">x</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> y = a * x * x + b * x + c;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(coords.<span class="hljs-property">y</span>);</span><br><span class="language-javascript">                box.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;transform&#x27;</span>, <span class="hljs-string">`translate(<span class="hljs-subst">$&#123;x&#125;</span>px, <span class="hljs-subst">$&#123;y&#125;</span>px) rotate(<span class="hljs-subst">$&#123;coords.y&#125;</span>deg)`</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">// box.style.setProperty(&#x27;transform&#x27;, `rotate($&#123;coords.y&#125;deg)`);</span></span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">            .<span class="hljs-title function_">start</span>();</span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-炸弹爆炸"><a href="#2-炸弹爆炸" class="headerlink" title="2.炸弹爆炸"></a>2.炸弹爆炸</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/lottie-web/5.7.8/lottie.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bodymovin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> animation = <span class="hljs-variable language_">window</span>.<span class="hljs-property">bodymovin</span>.<span class="hljs-title function_">loadAnimation</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">container</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.bodymovin&#x27;</span>), <span class="hljs-comment">// 要包含该动画的dom元素</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">renderer</span>: <span class="hljs-string">&#x27;svg&#x27;</span>, <span class="hljs-comment">// 渲染方式，svg、canvas、html（轻量版仅svg渲染）</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">loop</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否循环播放</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否自动播放</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;./bomb.json&#x27;</span>, <span class="hljs-comment">// 动画json文件路径</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>因此我们只需要在抛物线完成后再立即调用爆炸特效，而<code>tween.js</code> 也给我提供了事件方法<code>onComplete</code>。我们只需要在<code>onComplete</code>回调中，让爆炸动画开始。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">tween.<span class="hljs-title function_">onComplete</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;  <br>    <span class="hljs-comment">// 写爆炸动画</span><br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>展开语法(spread syntax)</title>
    <link href="/2021/05/31/%E5%B1%95%E5%BC%80%E5%89%AF%E6%9C%AC/"/>
    <url>/2021/05/31/%E5%B1%95%E5%BC%80%E5%89%AF%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>let a = {…a}</p><p>相当于一级属性的深拷贝</p><p>let a = {…a, a.name=1}改了里面的属性，相当于合并</p><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> bar = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">let</span> baz = &#123; ...bar &#125;; <span class="hljs-comment">// &#123; a: 1, b: 2 &#125;</span><br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> bar = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;;<br><br><span class="hljs-keyword">let</span> baz = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, bar); <span class="hljs-comment">// &#123; a: 1, b: 2 &#125;</span><br></code></pre></td></tr></table></figure><p>可以将数组转换为参数序列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">38</span>];<br><span class="hljs-title function_">add</span>(...numbers) <span class="hljs-comment">// 42</span><br></code></pre></td></tr></table></figure><p>扩展运算符可以与解构赋值结合起来，用于生成数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [first, ...rest] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>first <span class="hljs-comment">// 1</span><br>rest  <span class="hljs-comment">// [2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><p><strong>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</strong></p><p>扩展运算符还可以将字符串转为真正的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[...<span class="hljs-string">&#x27;hello&#x27;</span>]<br><span class="hljs-comment">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span><br></code></pre></td></tr></table></figure><p>数据结构转为数组,比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// arguments对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>];<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Object.assign()</title>
    <link href="/2021/05/28/object/"/>
    <url>/2021/05/28/object/</url>
    
    <content type="html"><![CDATA[<p><code>**Object.assign()**</code> 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> target = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">const</span> source = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">5</span> &#125;;<br><br><span class="hljs-keyword">const</span> returnedTarget = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target, source);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target);<br><span class="hljs-comment">// expected output: Object &#123; a: 1, b: 4, c: 5 &#125;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(returnedTarget);<br><span class="hljs-comment">// expected output: Object &#123; a: 1, b: 4, c: 5 &#125;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">deteleObject</span> = (<span class="hljs-params">obj</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> uniques = []<br>    <span class="hljs-keyword">let</span> stringify = &#123;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; obj.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj[i])<br>        keys.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-title class_">Number</span>(a) - <span class="hljs-title class_">Number</span>(b))<br>        &#125;)<br>        <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; keys.<span class="hljs-property">length</span>; j++) &#123;<br>            str += <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(keys[j])<br>            str += <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj[i][keys[j]])<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!stringify.<span class="hljs-title function_">hasOwnProperty</span>(str)) &#123;<br>            uniques.<span class="hljs-title function_">push</span>(obj[i])<br>            stringify[str] = <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> uniques<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">Object.<span class="hljs-keyword">assign</span>(<span class="hljs-keyword">target</span>, ...sources)<br></code></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><p><code>target</code></p><p>目标对象。</p></li><li><p><code>sources</code></p><p>源对象。</p></li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>目标对象。</p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。</p><p><code>Object.assign</code> 方法只会拷贝源对象自身的并且可枚举的属性到目标对象。该方法使用源对象的<code>[[Get]]</code>和目标对象的<code>[[Set]]</code>，所以它会调用相关 getter 和 setter。因此，它分配属性，而不仅仅是复制或定义新的属性。如果合并源包含getter，这可能使其不适合将新属性合并到原型中。为了将属性定义（包括其可枚举性）复制到原型，应使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor"><code>Object.getOwnPropertyDescriptor()</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"><code>Object.defineProperty()</code></a> 。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String"><code>String</code></a>类型和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol"><code>Symbol</code></a> 类型的属性都会被拷贝。</p><p>在出现错误的情况下，例如，如果属性不可写，会引发<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError"><code>TypeError</code></a>，如果在引发错误之前添加了任何属性，则可以更改<code>target</code>对象。</p><p>注意，<code>Object.assign</code> 不会在那些<code>source</code>对象值为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null"><code>null</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a> 的时候抛出错误。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端去除数组中重复对象</title>
    <link href="/2021/05/24/%E5%89%8D%E7%AB%AF%E5%8E%BB%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/05/24/%E5%89%8D%E7%AB%AF%E5%8E%BB%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p>两个函数</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">deteleObject</span> = (<span class="hljs-params">obj</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> uniques = []<br>    <span class="hljs-keyword">let</span> stringify = &#123;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; obj.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj[i])<br>        keys.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-title class_">Number</span>(a) - <span class="hljs-title class_">Number</span>(b))<br>        &#125;)<br>        <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; keys.<span class="hljs-property">length</span>; j++) &#123;<br>            str += <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(keys[j])<br>            str += <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj[i][keys[j]])<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!stringify.<span class="hljs-title function_">hasOwnProperty</span>(str)) &#123;<br>            uniques.<span class="hljs-title function_">push</span>(obj[i])<br>            stringify[str] = <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> uniques<br>&#125;<br></code></pre></td></tr></table></figure><p>暂未使用的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> hash = &#123;&#125;<br>arr = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item, next</span>) &#123; <br>    hash[next.<span class="hljs-property">name</span>] ? <span class="hljs-string">&#x27;&#x27;</span> : hash[next.<span class="hljs-property">name</span>] = <span class="hljs-literal">true</span> &amp;&amp; item.<span class="hljs-title function_">push</span>(next) <br>    <span class="hljs-keyword">return</span> item<br>&#125;, [])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue-element-admin后台权限</title>
    <link href="/2021/05/19/premission-js/"/>
    <url>/2021/05/19/premission-js/</url>
    
    <content type="html"><![CDATA[<p>★主要学习文档：<a href="https://juejin.cn/post/6844903478880370701">https://juejin.cn/post/6844903478880370701</a></p><span id="more"></span><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><hr><ul><li>创建vue实例的时候将vue-router挂载，但这个时候vue-router挂载一些登录或者不用权限的公用的页面。</li><li>当用户登录后，获取用role，将role和路由表每个页面的需要的权限作比较，生成最终用户可访问的路由表。</li><li>调用router.addRoutes(store.getters.addRouters)添加用户可访问的路由。</li><li>使用vuex管理路由表，根据vuex中可访问的路由渲染侧边栏组件。</li></ul><h3 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h3><hr><p>首先我们实现router.js路由表，这里就拿前端控制路由来举例(后端存储的也差不多，稍微改造一下就好了)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// router.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/login/&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">dashboard</span> = resolve =&gt; <span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;../views/dashboard/index&#x27;</span>], resolve);<br><span class="hljs-comment">//使用了vue-routerd的[Lazy Loading Routes</span><br>](<span class="hljs-attr">https</span>:<span class="hljs-comment">//router.vuejs.org/en/advanced/lazy-loading.html)</span><br><br><span class="hljs-comment">//所有权限通用路由表 </span><br><span class="hljs-comment">//如首页和登录页和一些不用权限的公用页面</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> constantRouterMap = [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Login</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/dashboard&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;首页&#x27;</span>,<br>    <span class="hljs-attr">children</span>: [&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;dashboard&#x27;</span>, <span class="hljs-attr">component</span>: dashboard &#125;]<br>  &#125;,<br>]<br><br><span class="hljs-comment">//实例化vue的时候只挂载constantRouter</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>  <span class="hljs-attr">routes</span>: constantRouterMap<br>&#125;);<br><br><span class="hljs-comment">//异步挂载的路由</span><br><span class="hljs-comment">//动态需要根据权限加载的路由表 </span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> asyncRouterMap = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/permission&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;权限测试&#x27;</span>,<br>    <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">role</span>: [<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;super_editor&#x27;</span>] &#125;, <span class="hljs-comment">//页面需要的权限</span><br>    <span class="hljs-attr">children</span>: [<br>    &#123; <br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;index&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Permission</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;权限测试页&#x27;</span>,<br>      <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">role</span>: [<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;super_editor&#x27;</span>] &#125;  <span class="hljs-comment">//页面需要的权限</span><br>    &#125;]<br>  &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/404&#x27;</span>, <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span> &#125;<br>];<br><br><br></code></pre></td></tr></table></figure><p>这里我们根据 <a href="https://router.vuejs.org/en/advanced/meta.html">vue-router官方推荐</a> 的方法通过meta标签来标示改页面能访问的权限有哪些。如<code>meta: &#123; role: [&#39;admin&#39;,&#39;super_editor&#39;] &#125;</code>表示该页面只有admin和超级编辑才能有资格进入。</p><p><strong>注意事项</strong>：这里有一个需要非常注意的地方就是 <code>404</code> 页面一定要最后加载，如果放在<code>constantRouterMap</code>一同声明了<code>404</code>，后面的所以页面都会被拦截到<code>404</code>，详细的问题见<a href="https://github.com/vuejs/vue-router/issues/1176">addRoutes when you’ve got a wildcard route for 404s does not work</a></p><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><hr><p><strong>关键的main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (store.<span class="hljs-property">getters</span>.<span class="hljs-property">token</span>) &#123; <span class="hljs-comment">// 判断是否有token</span><br>    <span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>      <span class="hljs-title function_">next</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span> &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (store.<span class="hljs-property">getters</span>.<span class="hljs-property">roles</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 判断当前用户是否已拉取完user_info信息</span><br>        store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;GetInfo&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123; <span class="hljs-comment">// 拉取info</span><br>          <span class="hljs-keyword">const</span> roles = res.<span class="hljs-property">data</span>.<span class="hljs-property">role</span>;<br>          store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;GenerateRoutes&#x27;</span>, &#123; roles &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">// 生成可访问的路由表</span><br>            router.<span class="hljs-title function_">addRoutes</span>(store.<span class="hljs-property">getters</span>.<span class="hljs-property">addRouters</span>) <span class="hljs-comment">// 动态添加可访问路由表</span><br>            <span class="hljs-title function_">next</span>(&#123; ...to, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;) <span class="hljs-comment">// hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record</span><br>          &#125;)<br>        &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>        &#125;);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">next</span>() <span class="hljs-comment">//当有用户权限的时候，说明所有可访问路由已生成 如访问没权限的全面会自动进入404页面</span><br>      &#125;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (whiteList.<span class="hljs-title function_">indexOf</span>(to.<span class="hljs-property">path</span>) !== -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 在免登录白名单，直接进入</span><br>      <span class="hljs-title function_">next</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/login&#x27;</span>); <span class="hljs-comment">// 否则全部重定向到登录页</span><br>    &#125;<br>  &#125;<br>&#125;);<br><br><br></code></pre></td></tr></table></figure><h3 id="store-permission-js"><a href="#store-permission-js" class="headerlink" title="store/permission.js"></a>store/permission.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// store/permission.js</span><br><span class="hljs-keyword">import</span> &#123; asyncRouterMap, constantRouterMap &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/router&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hasPermission</span>(<span class="hljs-params">roles, route</span>) &#123;<br>  <span class="hljs-keyword">if</span> (route.<span class="hljs-property">meta</span> &amp;&amp; route.<span class="hljs-property">meta</span>.<span class="hljs-property">role</span>) &#123;<br>    <span class="hljs-keyword">return</span> roles.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">role</span> =&gt;</span> route.<span class="hljs-property">meta</span>.<span class="hljs-property">role</span>.<span class="hljs-title function_">indexOf</span>(role) &gt;= <span class="hljs-number">0</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> permission = &#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">routers</span>: constantRouterMap,<br>    <span class="hljs-attr">addRouters</span>: []<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-attr">SET_ROUTERS</span>: <span class="hljs-function">(<span class="hljs-params">state, routers</span>) =&gt;</span> &#123;<br>      state.<span class="hljs-property">addRouters</span> = routers;<br>      state.<span class="hljs-property">routers</span> = constantRouterMap.<span class="hljs-title function_">concat</span>(routers);<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title class_">GenerateRoutes</span>(&#123; commit &#125;, data) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123; roles &#125; = data;<br>        <span class="hljs-keyword">const</span> accessedRouters = asyncRouterMap.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (roles.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;admin&#x27;</span>) &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasPermission</span>(roles, v)) &#123;<br>            <span class="hljs-keyword">if</span> (v.<span class="hljs-property">children</span> &amp;&amp; v.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>              v.<span class="hljs-property">children</span> = v.<span class="hljs-property">children</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">child</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasPermission</span>(roles, child)) &#123;<br>                  <span class="hljs-keyword">return</span> child<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>              &#125;);<br>              <span class="hljs-keyword">return</span> v<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-keyword">return</span> v<br>            &#125;<br>          &#125;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;);<br>        <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;SET_ROUTERS&#x27;</span>, accessedRouters);<br>        <span class="hljs-title function_">resolve</span>();<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> permission;<br><br><br></code></pre></td></tr></table></figure><p>这里的代码说白了就是干了一件事，通过用户的权限和之前在router.js里面asyncRouterMap的每一个页面所需要的权限做匹配，最后返回一个该用户能够访问路由有哪些。</p><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><hr><p>最后一个涉及到权限的地方就是侧边栏，不过在前面的基础上已经很方便就能实现动态显示侧边栏了。这里侧边栏基于element-ui的NavMenu来实现的。 代码有点多不贴详细的代码了，有兴趣的可以直接去github上看<a href="https://github.com/PanJiaChen/vue-element-admin/tree/master/src/views/layout/components/Sidebar">地址</a>，或者直接看关于侧边栏的<a href="https://panjiachen.github.io/vue-element-admin-site/#/router-and-nav">文档</a>。</p><p>说白了就是遍历之前算出来的<code>permission_routers</code>，通过vuex拿到之后动态v-for渲染而已。不过这里因为有一些业务需求所以加了很多判断 比如我们在定义路由的时候会加很多参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* hidden: true                   if `hidden:true` will not show in the sidebar(default is false)</span><br><span class="hljs-comment">* redirect: noredirect           if `redirect:noredirect` will no redirct in the breadcrumb</span><br><span class="hljs-comment">* name:&#x27;router-name&#x27;             the name is used by &lt;keep-alive&gt; (must set!!!)</span><br><span class="hljs-comment">* meta : &#123;</span><br><span class="hljs-comment">   role: [&#x27;admin&#x27;,&#x27;editor&#x27;]     will control the page role (you can set multiple roles)</span><br><span class="hljs-comment">   title: &#x27;title&#x27;               the name show in submenu and breadcrumb (recommend set)</span><br><span class="hljs-comment">   icon: &#x27;svg-name&#x27;             the icon show in the sidebar,</span><br><span class="hljs-comment">   noCache: true                if fasle ,the page will no be cached(default is false)</span><br><span class="hljs-comment"> &#125;</span><br><span class="hljs-comment">**/</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端设置内容超出自动换行</title>
    <link href="/2021/05/19/workbreak/"/>
    <url>/2021/05/19/workbreak/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*设置内容超出后自动换行*/</span><br>word-<span class="hljs-attr">wrap</span>: <span class="hljs-keyword">break</span>-word;<br>word-<span class="hljs-attr">break</span>: <span class="hljs-keyword">break</span>-all;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端拖拽两个盒模型</title>
    <link href="/2021/05/19/drag/"/>
    <url>/2021/05/19/drag/</url>
    
    <content type="html"><![CDATA[<p>拖拽线，下面的上下内容分区的比例会改变</p><p><img src="/2021/05/19/drag/1.png" alt="柱状图1"></p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;topDom&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;containorOuter&quot;</span>&gt;</span>上面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;line&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;moveDom&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dragLine&quot;</span> /&gt;</span>  // 拖拽的线<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bottomDom&quot;</span> &gt;</span>下面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">topDom</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">topDom</span><br>    <span class="hljs-keyword">const</span> _this = <span class="hljs-variable language_">this</span><br>    <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> moveDom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;line&#x27;</span>)<br>      moveDom.<span class="hljs-property">onmousedown</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>        _this.<span class="hljs-property">clientStartX</span> = e.<span class="hljs-property">clientY</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>          _this.<span class="hljs-title function_">moveHandle</span>(e.<span class="hljs-property">clientY</span>, _this.<span class="hljs-property">topDom</span>)<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-literal">null</span><br>          <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-literal">null</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>      &#125;<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">moveHandle</span>(<span class="hljs-params">nowClient, topDom</span>) &#123;<br>      <span class="hljs-keyword">let</span> changeHight = nowClient - <span class="hljs-number">103</span><br>      <span class="hljs-keyword">let</span> remainHight = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span> - nowClient<br>      <span class="hljs-comment">// 下面两个判断是控制拖动的最大范围，不能完全覆盖</span><br>      <span class="hljs-keyword">if</span> (changeHight &lt; <span class="hljs-number">100</span>) &#123;<br>        changeHight = <span class="hljs-number">100</span><br>        nowClient = <span class="hljs-number">100</span> + <span class="hljs-number">103</span><br>        remainHight = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span> - nowClient<br>      &#125;<br>      <span class="hljs-keyword">if</span> (remainHight &lt; <span class="hljs-number">100</span>) &#123;<br>        remainHight = <span class="hljs-number">100</span><br>        nowClient = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span> - <span class="hljs-number">100</span><br>        changeHight = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span> - <span class="hljs-number">203</span><br>      &#125;<br>      topDom.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = changeHight + <span class="hljs-string">&#x27;px&#x27;</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">bottomDom</span>.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = remainHight + <span class="hljs-string">&#x27;px&#x27;</span><br>    &#125;,<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">// 线的样式<br><span class="hljs-selector-class">.dragLine</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#dcdfe6</span>;<br>    <span class="hljs-attribute">cursor</span>: row-resize;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u012767761/article/details/82712194">https://blog.csdn.net/u012767761/article/details/82712194</a>  鼠标样式详情</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>通用的前端复制方法</title>
    <link href="/2021/05/14/copy/"/>
    <url>/2021/05/14/copy/</url>
    
    <content type="html"><![CDATA[<p>前端通用的copy方法:</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">copyUrl</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> aux = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;input&#x27;</span>)<br>    aux.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;value&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">loginHerf</span>)<span class="hljs-comment">// this.loginHerf是需要copy的东西</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(aux)<br>    aux.<span class="hljs-title function_">select</span>()<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;copy&#x27;</span>)<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(aux)<br>    <span class="hljs-variable language_">this</span>.$message(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;复制成功!&#x27;</span><br>    &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><p>或者</p><p>使用插件clipboard.js</p><p>使用插件v-clipboard</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//安装</span><br>npm install --save v-clipboard<br><br><span class="hljs-comment">//在main.js中引入</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Clipboard</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;v-clipboard&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Clipboard</span>)<br><br><span class="hljs-comment">//使用</span><br>&lt;button v-clipboard=<span class="hljs-string">&quot;value&quot;</span>&gt;<br>  <span class="hljs-title class_">Copy</span> to clipboard<br>&lt;/button&gt;<br>或者<br>&lt;button v-clipboard=<span class="hljs-string">&quot;() =&gt; value&quot;</span>&gt;<br>  <span class="hljs-title class_">Copy</span> to clipboard<br>&lt;/button&gt;<br>或者<br><span class="hljs-variable language_">this</span>.$clipboard(value)<br><br><span class="hljs-comment">//回调事件</span><br>&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-clipboard</span>=<span class="hljs-string">&quot;foo&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">v-clipboard:success</span>=<span class="hljs-string">&quot;clipboardSuccessHandler&quot;</span> // <span class="hljs-attr">Success</span> <span class="hljs-attr">event</span> <span class="hljs-attr">handler</span> </span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">v-clipboard:error</span>=<span class="hljs-string">&quot;clipboardErrorHandler&quot;</span>&gt;</span>    // Error event handler</span><br><span class="language-xml">      Copy to clipboard</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    clipboardSuccessHandler (&#123; value, event &#125;) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;success&#x27;</span>, value)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    clipboardErrorHandler (&#123; value, event &#125;) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error&#x27;</span>, value)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>React入门（井字棋）</title>
    <link href="/2021/05/10/react/"/>
    <url>/2021/05/10/react/</url>
    
    <content type="html"><![CDATA[<p>React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;square&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123; alert(&#x27;cilck&#x27;);</span><br><span class="language-xml">  &#125;&#125;&gt;</span><br><span class="language-xml">        &#123;this.props.value&#125;</span><br><span class="language-xml">        &#123;/* TODO */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Board</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">renderSquare</span>(<span class="hljs-params">i</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Square</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;i&#125;</span> /&gt;</span></span>;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> status = <span class="hljs-string">&#x27;Next player: X&#x27;</span>;<br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;status&quot;</span>&gt;</span>&#123;status&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;board-row&quot;</span>&gt;</span></span><br><span class="language-xml">          &#123;this.renderSquare(0)&#125;</span><br><span class="language-xml">          &#123;this.renderSquare(1)&#125;</span><br><span class="language-xml">          &#123;this.renderSquare(2)&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;board-row&quot;</span>&gt;</span></span><br><span class="language-xml">          &#123;this.renderSquare(3)&#125;</span><br><span class="language-xml">          &#123;this.renderSquare(4)&#125;</span><br><span class="language-xml">          &#123;this.renderSquare(5)&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;board-row&quot;</span>&gt;</span></span><br><span class="language-xml">          &#123;this.renderSquare(6)&#125;</span><br><span class="language-xml">          &#123;this.renderSquare(7)&#125;</span><br><span class="language-xml">          &#123;this.renderSquare(8)&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Game</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;game&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;game-board&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Board</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;game-info&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;/* status */&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>&#123;/* TODO */&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// ========================================</span><br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Game</span> /&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br><br></code></pre></td></tr></table></figure><p>建立方块。</p><p><strong>注意</strong></p><p>在 JavaScript class中，每次你定义其子类的构造函数时，都需要调用 <code>super</code> 方法。因此，在所有含有构造函数的的 React 组件中，构造函数必须以 <code>super(props)</code> 开头。</p><h3 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h3><p>在 <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en">Chrome</a> 或者 <a href="https://addons.mozilla.org/en-US/firefox/addon/react-devtools/">Firefox</a> 中安装扩展 React Devtools 可以让你在浏览器开发者工具中查看 React 的组件树。</p><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-comment">// constructor(props) &#123;</span><br>  <span class="hljs-comment">//   super(props);</span><br>  <span class="hljs-comment">//   this.state = &#123;</span><br>  <span class="hljs-comment">//     value: null,</span><br>  <span class="hljs-comment">//   &#125;</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;square&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123; this.props.onClick()</span><br><span class="language-xml">  &#125;&#125;&gt;</span><br><span class="language-xml">        &#123;this.props.value&#125;</span><br><span class="language-xml">        &#123;/* TODO */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Board</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">squares</span>: <span class="hljs-title class_">Array</span>(<span class="hljs-number">9</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-literal">null</span>),<br>      <span class="hljs-attr">xIsNext</span>: <span class="hljs-literal">true</span>,<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">handleClick</span>(<span class="hljs-params">i</span>) &#123;<br>    <span class="hljs-keyword">const</span> squares = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">squares</span>.<span class="hljs-title function_">slice</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">calculateWinner</span>(squares) || squares[i]) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    squares[i] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">xIsNext</span> ? <span class="hljs-string">&#x27;X&#x27;</span> : <span class="hljs-string">&#x27;O&#x27;</span>;<br>    <span class="hljs-comment">// squares[i] = &#x27;X&#x27;;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">squares</span>: squares,<br>      <span class="hljs-attr">xIsNext</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">xIsNext</span>,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-title function_">renderSquare</span>(<span class="hljs-params">i</span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Square</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.squares[i]&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.handleClick(i)&#125;</span><br><span class="language-xml">      /&gt;</span><br>    )<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> winner = <span class="hljs-title function_">calculateWinner</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">squares</span>);<br>    <span class="hljs-keyword">let</span> status;<br>    <span class="hljs-keyword">if</span> (winner) &#123;<br>      status = <span class="hljs-string">&#x27;Winner: &#x27;</span> + winner;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      status = <span class="hljs-string">&#x27;Next player: &#x27;</span> + (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">xIsNext</span> ? <span class="hljs-string">&#x27;X&#x27;</span> : <span class="hljs-string">&#x27;O&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">// const status = &#x27;Next player: &#x27; + (this.state.xIsNext ? &#x27;X&#x27; : &#x27;O&#x27;);</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;status&quot;</span>&gt;</span>&#123;status&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;board-row&quot;</span>&gt;</span></span><br><span class="language-xml">          &#123;this.renderSquare(0)&#125;</span><br><span class="language-xml">          &#123;this.renderSquare(1)&#125;</span><br><span class="language-xml">          &#123;this.renderSquare(2)&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;board-row&quot;</span>&gt;</span></span><br><span class="language-xml">          &#123;this.renderSquare(3)&#125;</span><br><span class="language-xml">          &#123;this.renderSquare(4)&#125;</span><br><span class="language-xml">          &#123;this.renderSquare(5)&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;board-row&quot;</span>&gt;</span></span><br><span class="language-xml">          &#123;this.renderSquare(6)&#125;</span><br><span class="language-xml">          &#123;this.renderSquare(7)&#125;</span><br><span class="language-xml">          &#123;this.renderSquare(8)&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Game</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;game&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;game-board&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Board</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;game-info&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;/* status */&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>&#123;/* TODO */&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// ========================================</span><br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Game</span> /&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">calculateWinner</span>(<span class="hljs-params">squares</span>) &#123;<br>  <span class="hljs-keyword">const</span> lines = [<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>],<br>    [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],<br>    [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>],<br>    [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>],<br>  ];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; lines.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> [a, b, c] = lines[i];<br>    <span class="hljs-keyword">if</span> (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;<br>      <span class="hljs-keyword">return</span> squares[a];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>右箭头CSS</title>
    <link href="/2021/05/07/rightArrow/"/>
    <url>/2021/05/07/rightArrow/</url>
    
    <content type="html"><![CDATA[<p>右箭头的样式，可以用&gt;这个，也可以用css，css更容易更改样式和调整。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">.<span class="hljs-property">right</span>-arrow &#123;  <br>    display :inline-block;<br>    <span class="hljs-attr">position</span>: relative;<br>    <span class="hljs-attr">width</span>: 14px;<br>    <span class="hljs-attr">height</span>: 26px;<br>    margin-<span class="hljs-attr">right</span>: 20px;<br>&#125;<br>.<span class="hljs-property">right</span>-<span class="hljs-attr">arrow</span>::after &#123;<br>    <span class="hljs-attr">display</span>: inline-block;<br>    <span class="hljs-attr">content</span>: <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-attr">height</span>: 13px;<br>    <span class="hljs-attr">width</span>: 13px;<br>    border-<span class="hljs-attr">width</span>: 3px 3px <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>    border-<span class="hljs-attr">color</span>: #<span class="hljs-number">979797</span>;<br>    border-<span class="hljs-attr">style</span>: solid;<br>    <span class="hljs-attr">transform</span>: <span class="hljs-title function_">matrix</span>(<span class="hljs-number">0.71</span>, <span class="hljs-number">0.71</span>, -<span class="hljs-number">0.71</span>, <span class="hljs-number">0.71</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-attr">position</span>: absolute;<br>    <span class="hljs-attr">top</span>: <span class="hljs-number">50</span>%;<br>    <span class="hljs-attr">left</span>: <span class="hljs-number">700</span> * @base;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Echarts的X轴数据过多时</title>
    <link href="/2021/04/23/echars4-23/"/>
    <url>/2021/04/23/echars4-23/</url>
    
    <content type="html"><![CDATA[<p> 在使用echarts 图表的时候发现要展示的数据过多，数据都挤压在一块</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">yAxis</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>    <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;张小勇1&#x27;</span>,<span class="hljs-string">&#x27;李思思2&#x27;</span>,<span class="hljs-string">&#x27;张明明3&#x27;</span>],<br>    <span class="hljs-attr">axisLabel</span>:&#123;<br>      <span class="hljs-attr">interval</span>:<span class="hljs-number">0</span>,<br>       <span class="hljs-attr">rotate</span>:<span class="hljs-number">45</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">dataZoom</span>: [&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;inside&#x27;</span>,<br>    <span class="hljs-attr">start</span>: <span class="hljs-number">50</span>,<br>    <span class="hljs-attr">end</span>: <span class="hljs-number">100</span><br>&#125;, &#123;<br>    <span class="hljs-attr">start</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">end</span>: <span class="hljs-number">10</span><br>&#125;],<br></code></pre></td></tr></table></figure><p>这样设置即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>防抖节流</title>
    <link href="/2021/04/13/debounce/"/>
    <url>/2021/04/13/debounce/</url>
    
    <content type="html"><![CDATA[<p>被触发的频次非常高，间隔很近，有可能造成其他的问题，这个时候需要防抖节流</p><h6 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h6><p>规定函数至少间隔多久执行。</p><ul><li><p>函数执行过一次后，在n秒内不能再次执行，否则推迟函数执行</p></li><li><p>下一次函数调用将清除上一次的定时器，并用setTimeout重新计时</p></li></ul><table><thead><tr><th>例子</th><th>未使用函数防抖</th><th>使用函数防抖</th></tr></thead><tbody><tr><td>当窗口大小发生变化时计算新的窗口大小</td><td>窗口大小改变就计算大小</td><td>窗口大小改变完成后计算大小</td></tr><tr><td>验证用户输入</td><td>用户每输入一个字符就进行验证</td><td>用户输入完成后进行验证</td></tr></tbody></table><h6 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h6><p>规定函数在某时间段内最多执行一次</p><ul><li>函数在n秒内最多执行一次</li><li>下一次函数调用将清除上一次的定时器</li><li>若函数执行的时间间隔小于等于规定时间间隔则用setTimeout在规定时间后再执行</li><li>若函数执行的时间间隔大于规定时间间隔则执行函数，并重新计时</li></ul><table><thead><tr><th>例子</th><th>未使用函数节流</th><th>使用函数节流</th></tr></thead><tbody><tr><td>页面滚动图片懒加载</td><td>每次都会执行事件处理程序</td><td>指定事件处理程序的执行频率</td></tr></tbody></table><p>何时使用函数防抖、何时使用函数节流看需求：</p><ul><li>当我们只需要处理最后一次触发事件时，用函数防抖。如窗口大小值变化时并不需要计算中间变化的过程，只需要窗口大小改变完成后的值</li><li>当事件触发过于频繁，我们需要限制事件处理程序的调用频率时，用函数节流。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 防抖</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">_debounce</span>(<span class="hljs-params">fn, delay</span>) &#123;<br><br>    <span class="hljs-keyword">var</span> delay = delay || <span class="hljs-number">200</span>;<br>    <span class="hljs-keyword">var</span> timer;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> th = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-keyword">var</span> args = <span class="hljs-variable language_">arguments</span>;<br>        <span class="hljs-keyword">if</span> (timer) &#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer);<br>        &#125;<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            timer = <span class="hljs-literal">null</span>;<br>            fn.<span class="hljs-title function_">apply</span>(th, args);<br>        &#125;, delay);<br>    &#125;;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 节流</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">_throttle</span>(<span class="hljs-params">fn, interval</span>) &#123;<br>    <span class="hljs-keyword">var</span> last;<br>    <span class="hljs-keyword">var</span> timer;<br>    <span class="hljs-keyword">var</span> interval = interval || <span class="hljs-number">200</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> th = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-keyword">var</span> args = <span class="hljs-variable language_">arguments</span>;<br>        <span class="hljs-keyword">var</span> now = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        <span class="hljs-keyword">if</span> (last &amp;&amp; now - last &lt; interval) &#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer);<br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                last = now;<br>                fn.<span class="hljs-title function_">apply</span>(th, args);<br>            &#125;, interval);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            last = now;<br>            fn.<span class="hljs-title function_">apply</span>(th, args);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在需要使用的组件引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; _debounce &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;...&quot;</span>;<br></code></pre></td></tr></table></figure><p>在 <code>methods</code> 中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-attr">changefield</span>: <span class="hljs-title function_">_debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">_type, index, item</span>) &#123;<br>      <span class="hljs-comment">// do something ...</span><br>  &#125;, <span class="hljs-number">200</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端性能优化</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Echart表格如何显示范围图</title>
    <link href="/2021/04/12/rangeOfEchart/"/>
    <url>/2021/04/12/rangeOfEchart/</url>
    
    <content type="html"><![CDATA[<p>Ecahrt提供的柱状图一般的x轴都在柱形的中间，如下图</p><span id="more"></span><p><img src="/2021/04/12/rangeOfEchart/1.png" alt="柱状图1"></p><p>但是如果是需要让柱形图在x轴数值的区间的话，则可以在echart的xAxis中设置两个数组，一个是使用Y的数组值，这个是相当于对齐中间，另一个是那个区间的数组，一般区间数组要比正常的Y轴多那么一个值，要么最左边，要么最右边。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> xData = [<span class="hljs-string">&#x27;00:00&#x27;</span>, <span class="hljs-string">&#x27;01:00&#x27;</span>, <span class="hljs-string">&#x27;02:00&#x27;</span>, <span class="hljs-string">&#x27;03:00&#x27;</span>, <span class="hljs-string">&#x27;04:00&#x27;</span>, <span class="hljs-string">&#x27;05:00&#x27;</span>, <span class="hljs-string">&#x27;06:00&#x27;</span>];<br><span class="hljs-keyword">const</span> barData = [<span class="hljs-number">5</span>, <span class="hljs-number">20</span>, <span class="hljs-number">36</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>];<br><br>option = &#123;<br>    <span class="hljs-attr">tooltip</span>: &#123;<br>        <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;axis&#x27;</span>,<br>        <span class="hljs-attr">confine</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    <span class="hljs-attr">xAxis</span>: [&#123;<br>            <span class="hljs-attr">data</span>: barData,<br>            <span class="hljs-attr">show</span>:<span class="hljs-literal">false</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">data</span>: xData,<br>            <span class="hljs-attr">axisLabel</span>: &#123;<br>                <span class="hljs-attr">interval</span>: <span class="hljs-number">0</span>,<br>                <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>            &#125;,<br>            <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;bottom&#x27;</span>,<br>            <span class="hljs-attr">boundaryGap</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">axisPointer</span>: &#123;<br>                <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>            &#125;,<br>        &#125;,<br>    ],<br>    <span class="hljs-attr">yAxis</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span>,<br>        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>    &#125;,<br>    <span class="hljs-attr">series</span>: [&#123;<br>        <span class="hljs-attr">data</span>: barData,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>        <span class="hljs-attr">backgroundStyle</span>: &#123;<br>            <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;rgba(220, 220, 220, 0.8)&#x27;</span>,<br>        &#125;,<br>    &#125;, ],<br>&#125;<br></code></pre></td></tr></table></figure><p>如下图</p><p><img src="/2021/04/12/rangeOfEchart/2.png" alt="柱状图2"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端传值时数字变量相加变成字符串拼接</title>
    <link href="/2021/04/09/%E5%89%8D%E7%AB%AF%E4%BC%A0%E5%80%BC%E6%97%B6%E6%95%B0%E5%AD%97%E5%8F%98%E9%87%8F%E7%9B%B8%E5%8A%A0%E7%BC%BA%E5%8F%98%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5/"/>
    <url>/2021/04/09/%E5%89%8D%E7%AB%AF%E4%BC%A0%E5%80%BC%E6%97%B6%E6%95%B0%E5%AD%97%E5%8F%98%E9%87%8F%E7%9B%B8%E5%8A%A0%E7%BC%BA%E5%8F%98%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p>今天答题计时功能前端给后端传时间这个值的时候，因为是两个值分别控制一个总时间（一个是已经作答的时间，另一个是存在的时间）两个数值用+相连，但是后台收到的却是字符串的拼接，这就导致了时间这个变量平白无故的很大，后面才知道需要<code>Number()</code>一下，<code>new Number()</code>和<code>Number()</code>还是有区别的。如果不用 new 运算符，把 Number() 作为一个函数来调用，它将把自己的参数转换成一个原始的数值，并且返回这个值（如果转换失败，则返回 NaN），Number() 和运算符 new 一起作为构造函数使用时，它返回一个新创建的 Number 对象</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>答题计时功能</title>
    <link href="/2021/04/08/%E7%AD%94%E9%A2%98%E8%AE%A1%E6%97%B6%E5%8A%9F%E8%83%BD/"/>
    <url>/2021/04/08/%E7%AD%94%E9%A2%98%E8%AE%A1%E6%97%B6%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>一个答题的网页端需要增加一个答题计时的功能，功能比较简单，但是需求是如果当前浏览器失焦的话便停止计时。</p><p>目前的想法是前端进行计时，然后定时返回给后端进行存储，后续如果关闭重新打开浏览器从后台读取保存的答题时间数据，虽然考虑到“永远不要相信用户的输入”，但是这个相对来说实现比较快速。</p><p>实现的方法如下：</p><p>在全局的vue页面中，引入一个用来计数的字段，如count，在vue的mounted函数中加入如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 监听当前页面 显示状态</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;visibilitychange&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">hanldeVisiblityChange</span>);<br><br><span class="hljs-comment">// 当页面被销毁时 移除监听</span><br><span class="hljs-variable language_">this</span>.$on(<span class="hljs-string">&#x27;hook:beforeDestroy&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;ws 我被销毁了, 移除监听&gt;&gt;&gt;&#x27;</span>);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;visibilitychange&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">hanldeVisiblityChange</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>增加一个销毁函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;ws 我被销毁了,vue生命周期 &gt;&gt;&gt;&#x27;</span>);<br>&#125;,<br></code></pre></td></tr></table></figure><p>接着在methods中增加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">  <span class="hljs-title function_">total</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>)<br>  &#125;,<br>    <span class="hljs-title function_">hanldeVisiblityChange</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">visibilityState</span> === <span class="hljs-string">&#x27;hidden&#x27;</span>) &#123;<br>          <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">time</span>);<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;ws  hidden&gt;&gt;&gt;关闭定时器&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">visibilityState</span> === <span class="hljs-string">&#x27;visible&#x27;</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;ws  visible&gt;&gt;&gt;启动定时器&#x27;</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">time</span>=<span class="hljs-built_in">setInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">total</span>,<span class="hljs-number">1000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后便可以监听当前窗口是否在使用，后续可以加入答题时间上传的功能等。</p><p>过了一天写完代码后，在获取到后台的已经作答时间以后就要调用这个定时器的判断，但是却不能够再监听当前页面的状态了，这个时候要在这个监听函数里进行清空定时器的操作，不管有没有，只要进hanldeVisiblityChange()这个函数就清空定时器，这样便解决了这个不能监听状态的问题。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>本地图片不显示问题</title>
    <link href="/2021/04/07/localPictorCantShow/"/>
    <url>/2021/04/07/localPictorCantShow/</url>
    
    <content type="html"><![CDATA[<p>今天想测试使用md加入图片，发现npm build以后的路径会出错，查百度是说由于hexo的版本升级后导致路径不对，可以使用修改后的hexo-asset-image插件来解决这个问题.。<span id="more"></span>将修改好的仓库代码fork到了自己的git仓库，使用</p><p><code>npm install https://github.com/shiyanmaia/hexo-asset-image.git --save</code></p><p>来进行安装，git推送以后如果使用<code>![](相对路径)</code>来显示图片会使用一个奇怪的路径，且使用的是github的绝对路径，经过排查发现是_config.yml的配置错误，其中URL的配置没有配置对</p><p><img src="/2021/04/07/localPictorCantShow/1.jpg" alt></p><p>如上图修改正确以后，便可以使用<code>![](相对路径)</code>来引入图片了，官方引入图片方法是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% asset<span class="hljs-emphasis">_img test.jpg [width] [height] This is an test image %&#125;</span><br></code></pre></td></tr></table></figure><p>不要使用中文路径，虽然经过验证，中文.md也可以正常使用，但是插入图片的话可能会有错误。</p>]]></content>
    
    
    <categories>
      
      <category>hexo的问题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vue响应式自适应高度</title>
    <link href="/2021/04/07/calcHeight/"/>
    <url>/2021/04/07/calcHeight/</url>
    
    <content type="html"><![CDATA[<p>解决vue中组件不能实时更新高度问题</p><span id="more"></span><p>在vue.mixin中添加<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">componentHeight</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">componentWidth</span>: <span class="hljs-number">0</span>,<br></code></pre></td></tr></table></figure><br>  mounted中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mounted</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">calcHeight</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">calcHeight</span>()<br>        <span class="hljs-keyword">const</span> resizeHandler = util.<span class="hljs-title function_">debounce</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">calcHeight</span>()<br>        &#125;, <span class="hljs-number">200</span>)<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, resizeHandler)<br>        <span class="hljs-variable language_">this</span>.$on(<span class="hljs-string">&#x27;hook:beforeDestroy&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, resizeHandler)<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  methods中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">calcHeight</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">calcHeight</span>) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_inner_timer</span>)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">_inner_timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">getClientRects</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>.<span class="hljs-title function_">getClientRects</span>() &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>.<span class="hljs-title function_">getClientRects</span>()[<span class="hljs-number">0</span>]) &#123;<br>      <span class="hljs-keyword">const</span> h = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>.<span class="hljs-title function_">getClientRects</span>()[<span class="hljs-number">0</span>].<span class="hljs-property">height</span><br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isNaN</span>(h)) &#123;<br>        <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_inner_timer</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">componentHeight</span> = h<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">componentWidth</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>.<span class="hljs-title function_">getClientRects</span>()[<span class="hljs-number">0</span>].<span class="hljs-property">width</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">calcHeightSuccess</span>) &#123;<br>          <span class="hljs-variable language_">this</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">calcHeightSuccess</span>]()<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;, <span class="hljs-number">10</span>)<br>&#125;,<br></code></pre></td></tr></table></figure><p>引入一个插件js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  debounce (func, wait) &#123;<br>    <span class="hljs-keyword">let</span> timeout, args, context, timestamp, result<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">later</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      <span class="hljs-keyword">const</span> last = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - timestamp<br>      <span class="hljs-keyword">if</span> (last &lt; wait &amp;&amp; last &gt; <span class="hljs-number">0</span>) &#123;<br>        timeout = <span class="hljs-built_in">setTimeout</span>(later, wait - last)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        timeout = <span class="hljs-literal">null</span><br>        result = func.<span class="hljs-title function_">apply</span>(context, args)<br>        context = args = <span class="hljs-literal">null</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...argArr</span>) &#123;<br>      context = <span class="hljs-variable language_">this</span><br>      args = argArr<br>      timestamp = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>      <span class="hljs-keyword">if</span> (!timeout) &#123; <span class="hljs-comment">// 延时不存在，即第一次调用</span><br>        timeout = <span class="hljs-built_in">setTimeout</span>(later, wait)<br>      &#125;<br>      <span class="hljs-keyword">return</span> result<br>    &#125;<br>  &#125; <br>&#125; <br></code></pre></td></tr></table></figure><p>接下来在需要使用计算的页面中设置<code>calcHeight:true</code>,然后便可以监控到<code>componentHeight</code>的变化</p>]]></content>
    
    
    <categories>
      
      <category>前端样式问题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Markdown中mermaid的使用(流程图)</title>
    <link href="/2021/04/07/Markdown%E4%B8%ADmermaid%E7%9A%84%E4%BD%BF%E7%94%A8-%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    <url>/2021/04/07/Markdown%E4%B8%ADmermaid%E7%9A%84%E4%BD%BF%E7%94%A8-%E6%B5%81%E7%A8%8B%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>Markdown 语法并不直接支持画图<br>但是可以引入mermaid插件</p><span id="more"></span><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">```mermaid</span><br><span class="hljs-code">graph LR;</span><br><span class="hljs-code">　　Portal--&gt;|发布/更新配置|Apollo配置中心;</span><br><span class="hljs-code">　　Apollo配置中心--&gt;|实时推送|App;</span><br><span class="hljs-code">　　App--&gt;|实时查询|Apollo配置中心;</span><br><span class="hljs-code">``` </span><span class="hljs-code">```</span><br><span class="hljs-code"></span><br><span class="hljs-code">``` </span>mermaid<br>graph LR;  <br>　　A--&gt;B;    <br>　　A--&gt;C;  <br>　　B--&gt;D;  <br>　　C--&gt;D;<br></code></pre></td></tr></table></figure><font size="2">具体使用参考:<p><a href="https://blog.csdn.net/fenghuizhidao/article/details/79440583">https://blog.csdn.net/fenghuizhidao/article/details/79440583</a><br><a href="https://www.cnblogs.com/nanqiang/p/8244309.html">https://www.cnblogs.com/nanqiang/p/8244309.html</a></p></font>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何删除GitHub中的所有提交历史记录？</title>
    <link href="/2021/04/06/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4GitHub%E4%B8%AD%E6%8F%90%E4%BA%A4%E7%9A%84%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/04/06/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4GitHub%E4%B8%AD%E6%8F%90%E4%BA%A4%E7%9A%84%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>删除.git文件夹可能会导致git存储库中的问题<br>如果要删除所有提交历史记录，但将代码保持在当前状态，可以按照以下方式安全地执行此操作：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS">git checkout --orphan latest_branch <span class="hljs-comment">// 尝试  运行  </span><br>git add -A <span class="hljs-comment">// 添加所有文件</span><br>git commit -am <span class="hljs-string">&quot;commit message&quot;</span> <span class="hljs-comment">// 提交更改</span><br>git branch -D master <span class="hljs-comment">// 删除分支</span><br>git branch -m master <span class="hljs-comment">// 将当前分支重命名</span><br>git push -f origin master <span class="hljs-comment">// 最后，强制更新存储库</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>gitHub的使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gitHub的使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端开发环境</title>
    <link href="/2020/09/07/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2020/09/07/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<ol><li>git-fork,用于代码版本管理<span id="more"></span></li><li>nodeJs</li><li>nvm,用于切换node版本</li><li>nrm,用于快速切换npm的镜像</li><li>VS Code 或 HBuilderX</li><li>Switch Host,切换host开发环境</li><li>本地Git, git bash, windows terminal</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端环境相关</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HELLO WORLD</title>
    <link href="/2020/08/06/HELLOW%20WORLD/"/>
    <url>/2020/08/06/HELLOW%20WORLD/</url>
    
    <content type="html"><![CDATA[<p>这是一个由hexo搭建的网站，使用fluid风格主题。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
